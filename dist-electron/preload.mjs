"use strict";
const electron = require("electron");
electron.contextBridge.exposeInMainWorld("electronAPI", {
  // 使用不同的键名，避免覆盖可能存在的其他 ipcRenderer 暴露
  // --- 精确暴露存储相关的 invoke 通道 ---
  // 将参数类型从 any 改为 unknown，与 ipcHandler 保持一致
  readStore: (fileName, defaultValue) => electron.ipcRenderer.invoke("read-store", fileName, defaultValue),
  writeStore: (fileName, data) => electron.ipcRenderer.invoke("write-store", fileName, data),
  // 新增：列出聊天会话文件
  listChatSessions: () => electron.ipcRenderer.invoke("list-chat-sessions"),
  // 新增：删除聊天会话文件
  deleteChatSession: (fileName) => electron.ipcRenderer.invoke("delete-chat-session", fileName),
  // --- Character Data API ---
  listCharacters: () => electron.ipcRenderer.invoke("list-characters"),
  saveCharacter: (character) => electron.ipcRenderer.invoke("save-character", character),
  deleteCharacter: (characterName) => electron.ipcRenderer.invoke("delete-character", characterName),
  // --- Script Data API ---
  listScripts: () => electron.ipcRenderer.invoke("list-scripts"),
  saveScript: (script) => electron.ipcRenderer.invoke("save-script", script),
  deleteScript: (scriptTitle) => electron.ipcRenderer.invoke("delete-script", scriptTitle),
  // --- LLM 服务相关 API ---
  llmGetServices: () => electron.ipcRenderer.invoke("llm-get-services"),
  llmSetApiKey: (providerId, apiKey) => electron.ipcRenderer.invoke("llm-set-api-key", providerId, apiKey),
  llmGetAvailableModels: (providerId) => electron.ipcRenderer.invoke("llm-get-available-models", providerId),
  // 新增获取已保存 Keys 的 API
  llmGetSavedKeys: () => electron.ipcRenderer.invoke("llm-get-saved-keys"),
  // 新增：调用聊天生成 API
  // 需要在调用处确保 options 符合 LLMChatOptions 结构 (从 './llm/BaseLLM' 导入)
  // 返回值 data 符合 LLMResponse 结构
  llmGenerateChat: (providerId, options) => electron.ipcRenderer.invoke("llm-generate-chat", providerId, options),
  // 新增：获取和保存自定义模型列表
  llmGetCustomModels: (providerId) => electron.ipcRenderer.invoke("llm-get-custom-models", providerId),
  llmSaveCustomModels: (providerId, models) => electron.ipcRenderer.invoke("llm-save-custom-models", providerId, models),
  // --- 代理相关 API ---
  proxyGetConfig: () => electron.ipcRenderer.invoke("proxy-get-config"),
  proxySetConfig: (config) => electron.ipcRenderer.invoke("proxy-set-config", config),
  proxyTestConnection: () => electron.ipcRenderer.invoke("proxy-test-connection")
  // 如果还需要通用的 on/off/send，可以在这里单独暴露，或者按需添加
  // on: (channel, listener) => { /* ... 安全实现 ... */ },
  // send: (channel, data) => { /* ... 安全实现 ... */ },
  // 你可以在这里暴露其他需要的 API。
});
function domReady(condition = ["complete", "interactive"]) {
  return new Promise((resolve) => {
    if (condition.includes(document.readyState)) {
      resolve(true);
    } else {
      document.addEventListener("readystatechange", () => {
        if (condition.includes(document.readyState)) {
          resolve(true);
        }
      });
    }
  });
}
const safeDOM = {
  append(parent, child) {
    if (!Array.from(parent.children).find((e) => e === child)) {
      return parent.appendChild(child);
    }
  },
  remove(parent, child) {
    if (Array.from(parent.children).find((e) => e === child)) {
      return parent.removeChild(child);
    }
  }
};
function createLoadingIndicator() {
  const className = `loaders-css__square-spin`;
  const styleContent = `
@keyframes square-spin {
  25% { transform: perspective(100px) rotateX(180deg) rotateY(0); }
  50% { transform: perspective(100px) rotateX(180deg) rotateY(180deg); }
  75% { transform: perspective(100px) rotateX(0) rotateY(180deg); }
  100% { transform: perspective(100px) rotateX(0) rotateY(0); }
}
.${className} > div {
  animation-fill-mode: both;
  width: 50px;
  height: 50px;
  background: #fff;
  animation: square-spin 3s 0s cubic-bezier(0.09, 0.57, 0.49, 0.9) infinite;
}
.app-loading-wrap {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #282c34;
  z-index: 9;
}
    `;
  const oStyle = document.createElement("style");
  const oDiv = document.createElement("div");
  oStyle.id = "app-loading-style";
  oStyle.innerHTML = styleContent;
  oDiv.className = "app-loading-wrap";
  oDiv.innerHTML = `<div class="${className}"><div></div></div>`;
  return {
    appendLoading() {
      safeDOM.append(document.head, oStyle);
      safeDOM.append(document.body, oDiv);
    },
    removeLoading() {
      safeDOM.remove(document.head, oStyle);
      safeDOM.remove(document.body, oDiv);
    }
  };
}
const { appendLoading, removeLoading } = createLoadingIndicator();
domReady().then(appendLoading);
window.onmessage = (ev) => {
  if (ev.data.payload === "removeLoading") {
    removeLoading();
  }
};
setTimeout(removeLoading, 4999);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5tanMiLCJzb3VyY2VzIjpbIi4uL2VsZWN0cm9uL3ByZWxvYWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXIgfSBmcm9tICdlbGVjdHJvbic7XHJcbmltcG9ydCB0eXBlIHsgTExNQ2hhdE9wdGlvbnMsIExMTVJlc3BvbnNlIH0gZnJvbSAnLi9sbG0vQmFzZUxMTSc7XHJcbmltcG9ydCB0eXBlIHsgUHJveHlDb25maWcgfSBmcm9tICcuL1Byb3h5TWFuYWdlcic7XHJcbi8vIOWvvOWFpeinkuiJsuWSjOWJp+acrOexu+Wei++8jOehruS/neS4juWQjuerr+WSjOWJjeerr+S9v+eUqOeahOexu+Wei+S4gOiHtFxyXG5pbXBvcnQgdHlwZSB7IEFJQ2hhcmFjdGVyLCBTY3JpcHQgfSBmcm9tICcuLi9zcmMvdHlwZXMnO1xyXG5cclxuLy8gLS0tLS0tLS0tIOWQkea4suafk+i/m+eoi+aatOmcsumAieaLqeaAp+eahCBBUEkgLS0tLS0tLS0tXHJcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2VsZWN0cm9uQVBJJywgeyAvLyDkvb/nlKjkuI3lkIznmoTplK7lkI3vvIzpgb/lhY3opobnm5blj6/og73lrZjlnKjnmoTlhbbku5YgaXBjUmVuZGVyZXIg5pq06ZyyXHJcbiAgLy8gLS0tIOeyvuehruaatOmcsuWtmOWCqOebuOWFs+eahCBpbnZva2Ug6YCa6YGTIC0tLVxyXG4gIC8vIOWwhuWPguaVsOexu+Wei+S7jiBhbnkg5pS55Li6IHVua25vd27vvIzkuI4gaXBjSGFuZGxlciDkv53mjIHkuIDoh7RcclxuICByZWFkU3RvcmU6IChmaWxlTmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHVua25vd24pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IHVua25vd247IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ3JlYWQtc3RvcmUnLCBmaWxlTmFtZSwgZGVmYXVsdFZhbHVlKSxcclxuICB3cml0ZVN0b3JlOiAoZmlsZU5hbWU6IHN0cmluZywgZGF0YTogdW5rbm93bik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCd3cml0ZS1zdG9yZScsIGZpbGVOYW1lLCBkYXRhKSxcclxuICAvLyDmlrDlop7vvJrliJflh7rogYrlpKnkvJror53mlofku7ZcclxuICBsaXN0Q2hhdFNlc3Npb25zOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBzdHJpbmdbXTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGlzdC1jaGF0LXNlc3Npb25zJyksXHJcbiAgLy8g5paw5aKe77ya5Yig6Zmk6IGK5aSp5Lya6K+d5paH5Lu2XHJcbiAgZGVsZXRlQ2hhdFNlc3Npb246IChmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1jaGF0LXNlc3Npb24nLCBmaWxlTmFtZSksXHJcblxyXG4gIC8vIC0tLSBDaGFyYWN0ZXIgRGF0YSBBUEkgLS0tXHJcbiAgbGlzdENoYXJhY3RlcnM6ICgpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IEFJQ2hhcmFjdGVyW107IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xpc3QtY2hhcmFjdGVycycpLFxyXG4gIHNhdmVDaGFyYWN0ZXI6IChjaGFyYWN0ZXI6IEFJQ2hhcmFjdGVyKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ3NhdmUtY2hhcmFjdGVyJywgY2hhcmFjdGVyKSxcclxuICBkZWxldGVDaGFyYWN0ZXI6IChjaGFyYWN0ZXJOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlLWNoYXJhY3RlcicsIGNoYXJhY3Rlck5hbWUpLFxyXG5cclxuICAvLyAtLS0gU2NyaXB0IERhdGEgQVBJIC0tLVxyXG4gIGxpc3RTY3JpcHRzOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBTY3JpcHRbXTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGlzdC1zY3JpcHRzJyksXHJcbiAgc2F2ZVNjcmlwdDogKHNjcmlwdDogU2NyaXB0KTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ3NhdmUtc2NyaXB0Jywgc2NyaXB0KSxcclxuICBkZWxldGVTY3JpcHQ6IChzY3JpcHRUaXRsZTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1zY3JpcHQnLCBzY3JpcHRUaXRsZSksXHJcblxyXG4gIC8vIC0tLSBMTE0g5pyN5Yqh55u45YWzIEFQSSAtLS1cclxuICBsbG1HZXRTZXJ2aWNlczogKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogeyBwcm92aWRlcklkOiBzdHJpbmc7IHByb3ZpZGVyTmFtZTogc3RyaW5nOyBkZWZhdWx0TW9kZWxzOiBzdHJpbmdbXSB9W107IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1nZXQtc2VydmljZXMnKSxcclxuICBsbG1TZXRBcGlLZXk6IChwcm92aWRlcklkOiBzdHJpbmcsIGFwaUtleTogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdsbG0tc2V0LWFwaS1rZXknLCBwcm92aWRlcklkLCBhcGlLZXkpLFxyXG4gIGxsbUdldEF2YWlsYWJsZU1vZGVsczogKHByb3ZpZGVySWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogc3RyaW5nW107IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1nZXQtYXZhaWxhYmxlLW1vZGVscycsIHByb3ZpZGVySWQpLFxyXG4gIC8vIOaWsOWinuiOt+WPluW3suS/neWtmCBLZXlzIOeahCBBUElcclxuICBsbG1HZXRTYXZlZEtleXM6ICgpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bGw+OyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdsbG0tZ2V0LXNhdmVkLWtleXMnKSxcclxuLy8g5paw5aKe77ya6LCD55So6IGK5aSp55Sf5oiQIEFQSVxyXG4gICAvLyDpnIDopoHlnKjosIPnlKjlpITnoa7kv50gb3B0aW9ucyDnrKblkIggTExNQ2hhdE9wdGlvbnMg57uT5p6EICjku44gJy4vbGxtL0Jhc2VMTE0nIOWvvOWFpSlcclxuICAgLy8g6L+U5Zue5YC8IGRhdGEg56ym5ZCIIExMTVJlc3BvbnNlIOe7k+aehFxyXG4gICBsbG1HZW5lcmF0ZUNoYXQ6IChwcm92aWRlcklkOiBzdHJpbmcsIG9wdGlvbnM6IExMTUNoYXRPcHRpb25zKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBMTE1SZXNwb25zZTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1nZW5lcmF0ZS1jaGF0JywgcHJvdmlkZXJJZCwgb3B0aW9ucyksXHJcbi8vIOaWsOWinu+8muiOt+WPluWSjOS/neWtmOiHquWumuS5ieaooeWei+WIl+ihqFxyXG4gICBsbG1HZXRDdXN0b21Nb2RlbHM6IChwcm92aWRlcklkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IHN0cmluZ1tdOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGxtLWdldC1jdXN0b20tbW9kZWxzJywgcHJvdmlkZXJJZCksXHJcbiAgIGxsbVNhdmVDdXN0b21Nb2RlbHM6IChwcm92aWRlcklkOiBzdHJpbmcsIG1vZGVsczogc3RyaW5nW10pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1zYXZlLWN1c3RvbS1tb2RlbHMnLCBwcm92aWRlcklkLCBtb2RlbHMpLFxyXG5cclxuICAgLy8gLS0tIOS7o+eQhuebuOWFsyBBUEkgLS0tXHJcbiAgIHByb3h5R2V0Q29uZmlnOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBQcm94eUNvbmZpZzsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgICBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb3h5LWdldC1jb25maWcnKSxcclxuICAgcHJveHlTZXRDb25maWc6IChjb25maWc6IFByb3h5Q29uZmlnKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICAgaXBjUmVuZGVyZXIuaW52b2tlKCdwcm94eS1zZXQtY29uZmlnJywgY29uZmlnKSxcclxuICAgcHJveHlUZXN0Q29ubmVjdGlvbjogKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogeyBpcDogc3RyaW5nOyBwcm94eVVybDogc3RyaW5nOyBwcm94eU1vZGU6IHN0cmluZyB9OyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgIGlwY1JlbmRlcmVyLmludm9rZSgncHJveHktdGVzdC1jb25uZWN0aW9uJyksXHJcblxyXG4gIC8vIOWmguaenOi/mOmcgOimgemAmueUqOeahCBvbi9vZmYvc2VuZO+8jOWPr+S7peWcqOi/memHjOWNleeLrOaatOmcsu+8jOaIluiAheaMiemcgOa3u+WKoFxyXG4gIC8vIG9uOiAoY2hhbm5lbCwgbGlzdGVuZXIpID0+IHsgLyogLi4uIOWuieWFqOWunueOsCAuLi4gKi8gfSxcclxuICAvLyBzZW5kOiAoY2hhbm5lbCwgZGF0YSkgPT4geyAvKiAuLi4g5a6J5YWo5a6e546wIC4uLiAqLyB9LFxyXG5cclxuICAvLyDkvaDlj6/ku6XlnKjov5nph4zmmrTpnLLlhbbku5bpnIDopoHnmoQgQVBJ44CCXHJcbn0pO1xyXG5cclxuLy8gLS0tLS0tLS0tIOmihOWKoOi9veiEmuacrOWKoOi9vSAtLS0tLS0tLS1cclxuZnVuY3Rpb24gZG9tUmVhZHkoY29uZGl0aW9uOiBEb2N1bWVudFJlYWR5U3RhdGVbXSA9IFsnY29tcGxldGUnLCAnaW50ZXJhY3RpdmUnXSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGlmIChjb25kaXRpb24uaW5jbHVkZXMoZG9jdW1lbnQucmVhZHlTdGF0ZSkpIHtcclxuICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbi5pbmNsdWRlcyhkb2N1bWVudC5yZWFkeVN0YXRlKSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBzYWZlRE9NID0ge1xyXG4gIGFwcGVuZChwYXJlbnQ6IEhUTUxFbGVtZW50LCBjaGlsZDogSFRNTEVsZW1lbnQpIHtcclxuICAgIGlmICghQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmZpbmQoZSA9PiBlID09PSBjaGlsZCkpIHtcclxuICAgICAgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICByZW1vdmUocGFyZW50OiBIVE1MRWxlbWVudCwgY2hpbGQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBpZiAoQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmZpbmQoZSA9PiBlID09PSBjaGlsZCkpIHtcclxuICAgICAgcmV0dXJuIHBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XHJcbiAgICB9XHJcbiAgfSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiDmnaXmupA6IGh0dHBzOi8vdG9iaWFzYWhsaW4uY29tL3NwaW5raXRcclxuICog77yI57qvIENTUyDliqjnlLvmlYjmnpzkvJjkuo4gSlMg5omn6KGM77yJXHJcbiAqL1xyXG4vLyDph43lkb3lkI3ku6Xpgb/lhY3lnKjpnZ4gUmVhY3Qg5paH5Lu25Lit6Kem5Y+RIEVTTGludCBob29rIOinhOWImemUmeivr1xyXG5mdW5jdGlvbiBjcmVhdGVMb2FkaW5nSW5kaWNhdG9yKCkge1xyXG4gIGNvbnN0IGNsYXNzTmFtZSA9IGBsb2FkZXJzLWNzc19fc3F1YXJlLXNwaW5gO1xyXG4gIGNvbnN0IHN0eWxlQ29udGVudCA9IGBcclxuQGtleWZyYW1lcyBzcXVhcmUtc3BpbiB7XHJcbiAgMjUlIHsgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDBweCkgcm90YXRlWCgxODBkZWcpIHJvdGF0ZVkoMCk7IH1cclxuICA1MCUgeyB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDEwMHB4KSByb3RhdGVYKDE4MGRlZykgcm90YXRlWSgxODBkZWcpOyB9XHJcbiAgNzUlIHsgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDBweCkgcm90YXRlWCgwKSByb3RhdGVZKDE4MGRlZyk7IH1cclxuICAxMDAlIHsgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDBweCkgcm90YXRlWCgwKSByb3RhdGVZKDApOyB9XHJcbn1cclxuLiR7Y2xhc3NOYW1lfSA+IGRpdiB7XHJcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxuICB3aWR0aDogNTBweDtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgYmFja2dyb3VuZDogI2ZmZjtcclxuICBhbmltYXRpb246IHNxdWFyZS1zcGluIDNzIDBzIGN1YmljLWJlemllcigwLjA5LCAwLjU3LCAwLjQ5LCAwLjkpIGluZmluaXRlO1xyXG59XHJcbi5hcHAtbG9hZGluZy13cmFwIHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDEwMHZ3O1xyXG4gIGhlaWdodDogMTAwdmg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGJhY2tncm91bmQ6ICMyODJjMzQ7XHJcbiAgei1pbmRleDogOTtcclxufVxyXG4gICAgYDtcclxuICBjb25zdCBvU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gIGNvbnN0IG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgb1N0eWxlLmlkID0gJ2FwcC1sb2FkaW5nLXN0eWxlJztcclxuICBvU3R5bGUuaW5uZXJIVE1MID0gc3R5bGVDb250ZW50O1xyXG4gIG9EaXYuY2xhc3NOYW1lID0gJ2FwcC1sb2FkaW5nLXdyYXAnO1xyXG4gIG9EaXYuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCIke2NsYXNzTmFtZX1cIj48ZGl2PjwvZGl2PjwvZGl2PmA7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBhcHBlbmRMb2FkaW5nKCkge1xyXG4gICAgICBzYWZlRE9NLmFwcGVuZChkb2N1bWVudC5oZWFkLCBvU3R5bGUpO1xyXG4gICAgICBzYWZlRE9NLmFwcGVuZChkb2N1bWVudC5ib2R5LCBvRGl2KTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVMb2FkaW5nKCkge1xyXG4gICAgICBzYWZlRE9NLnJlbW92ZShkb2N1bWVudC5oZWFkLCBvU3R5bGUpO1xyXG4gICAgICBzYWZlRE9NLnJlbW92ZShkb2N1bWVudC5ib2R5LCBvRGl2KTtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLy8g6LCD55So6YeN5ZG95ZCN5ZCO55qE5Ye95pWwXHJcbmNvbnN0IHsgYXBwZW5kTG9hZGluZywgcmVtb3ZlTG9hZGluZyB9ID0gY3JlYXRlTG9hZGluZ0luZGljYXRvcigpO1xyXG5kb21SZWFkeSgpLnRoZW4oYXBwZW5kTG9hZGluZyk7XHJcblxyXG53aW5kb3cub25tZXNzYWdlID0gZXYgPT4ge1xyXG4gIC8vIOS9v+eUqCBpZiDor63lj6Xku6Xmj5Dpq5jmuIXmmbDluqbvvIzmu6HotrMgRVNMaW50IOimgeaxglxyXG4gIGlmIChldi5kYXRhLnBheWxvYWQgPT09ICdyZW1vdmVMb2FkaW5nJykge1xyXG4gICAgcmVtb3ZlTG9hZGluZygpO1xyXG4gIH1cclxufTtcclxuXHJcbnNldFRpbWVvdXQocmVtb3ZlTG9hZGluZywgNDk5OSk7Il0sIm5hbWVzIjpbImNvbnRleHRCcmlkZ2UiLCJpcGNSZW5kZXJlciJdLCJtYXBwaW5ncyI6Ijs7QUFPQUEsU0FBQUEsY0FBYyxrQkFBa0IsZUFBZTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBRzdDLFdBQVcsQ0FBQyxVQUFrQixpQkFDNUJDLFNBQUFBLFlBQVksT0FBTyxjQUFjLFVBQVUsWUFBWTtBQUFBLEVBQ3pELFlBQVksQ0FBQyxVQUFrQixTQUM3QkEsU0FBQUEsWUFBWSxPQUFPLGVBQWUsVUFBVSxJQUFJO0FBQUE7QUFBQSxFQUVsRCxrQkFBa0IsTUFDaEJBLFNBQUFBLFlBQVksT0FB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
