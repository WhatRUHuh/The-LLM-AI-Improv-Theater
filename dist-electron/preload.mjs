"use strict";
const electron = require("electron");
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
  LogLevel2[LogLevel2["INFO"] = 1] = "INFO";
  LogLevel2[LogLevel2["WARN"] = 2] = "WARN";
  LogLevel2[LogLevel2["ERROR"] = 3] = "ERROR";
  return LogLevel2;
})(LogLevel || {});
const defaultLogConfig = {
  globalLevel: LogLevel.DEBUG,
  moduleLevels: {
    main: LogLevel.DEBUG,
    ipc: LogLevel.DEBUG,
    llm: LogLevel.DEBUG,
    storage: LogLevel.DEBUG,
    proxy: LogLevel.DEBUG
  },
  showTimestamp: true,
  colorfulConsole: true,
  logToFile: false
};
function getLogConfig() {
  return defaultLogConfig;
}
class Logger {
  /**
   * 构造函数
   * @param config 日志配置
   */
  constructor(config) {
    const globalConfig = getLogConfig();
    this.level = config.level;
    this.prefix = config.prefix || "";
    this.showTimestamp = config.showTimestamp !== void 0 ? config.showTimestamp : globalConfig.showTimestamp;
    this.colorfulConsole = config.colorfulConsole !== void 0 ? config.colorfulConsole : globalConfig.colorfulConsole;
  }
  /**
   * 格式化日志消息
   * @param level 日志级别
   * @param message 日志消息
   * @param args 额外参数
   * @returns 格式化后的日志消息
   */
  formatMessage(level, message, ...args) {
    const timestamp = this.showTimestamp ? `[${(/* @__PURE__ */ new Date()).toLocaleString("zh-CN")}] ` : "";
    const prefix = this.prefix ? `[${this.prefix}] ` : "";
    const levelStr = `[${level}] `;
    const formattedArgs = args.map((arg) => {
      if (typeof arg === "object") {
        try {
          return JSON.stringify(arg);
        } catch {
          return String(arg);
        }
      }
      return String(arg);
    });
    const baseMessage = `${timestamp}${prefix}${levelStr}${message} ${formattedArgs.join(" ")}`.trim();
    if (this.colorfulConsole) {
      if (level === "错误") {
        return `${"\x1B[31m"}${baseMessage}${"\x1B[0m"}`;
      } else if (level === "警告") {
        return `${"\x1B[33m"}${baseMessage}${"\x1B[0m"}`;
      } else if (level === "信息") {
        return `${"\x1B[36m"}${baseMessage}${"\x1B[0m"}`;
      } else if (level === "调试") {
        return `${"\x1B[90m"}${baseMessage}${"\x1B[0m"}`;
      }
    }
    return baseMessage;
  }
  /**
   * 确保字符串使用UTF-8编码
   * 这个函数在Windows终端中特别有用
   * @param str 输入字符串
   * @returns UTF-8编码的字符串
   */
  ensureUtf8(str) {
    if (process.platform === "win32") {
      try {
        return Buffer.from(str, "utf8").toString("utf8");
      } catch {
        return str;
      }
    }
    return str;
  }
  /**
   * 输出调试级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  debug(message, ...args) {
    if (this.level <= LogLevel.DEBUG) {
      const formattedMessage = this.formatMessage("调试", message, ...args);
      console.log(this.ensureUtf8(formattedMessage));
    }
  }
  /**
   * 输出信息级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  info(message, ...args) {
    if (this.level <= LogLevel.INFO) {
      const formattedMessage = this.formatMessage("信息", message, ...args);
      console.log(this.ensureUtf8(formattedMessage));
    }
  }
  /**
   * 输出警告级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  warn(message, ...args) {
    if (this.level <= LogLevel.WARN) {
      const formattedMessage = this.formatMessage("警告", message, ...args);
      console.warn(this.ensureUtf8(formattedMessage));
    }
  }
  /**
   * 输出错误级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  error(message, ...args) {
    if (this.level <= LogLevel.ERROR) {
      const formattedMessage = this.formatMessage("错误", message, ...args);
      console.error(this.ensureUtf8(formattedMessage));
    }
  }
}
const mainLogger = new Logger({ level: LogLevel.DEBUG, prefix: "主进程" });
new Logger({ level: LogLevel.DEBUG, prefix: "IPC" });
new Logger({ level: LogLevel.DEBUG, prefix: "LLM" });
new Logger({ level: LogLevel.DEBUG, prefix: "存储" });
new Logger({ level: LogLevel.DEBUG, prefix: "代理" });
({
  debug: mainLogger.debug.bind(mainLogger),
  info: mainLogger.info.bind(mainLogger),
  warn: mainLogger.warn.bind(mainLogger),
  error: mainLogger.error.bind(mainLogger)
});
async function setupGlobalEncoding() {
  process.env.LANG = "zh_CN.UTF-8";
  process.env.LC_ALL = "zh_CN.UTF-8";
  process.env.LC_CTYPE = "zh_CN.UTF-8";
  if (process.stdout.isTTY) {
    process.stdout.setDefaultEncoding("utf8");
  }
  if (process.stderr.isTTY) {
    process.stderr.setDefaultEncoding("utf8");
  }
}
setupGlobalEncoding().catch((err) => {
  console.error("设置全局编码时出错:", err);
});
electron.contextBridge.exposeInMainWorld("electronAPI", {
  // 使用不同的键名，避免覆盖可能存在的其他 ipcRenderer 暴露
  // --- 精确暴露存储相关的 invoke 通道 ---
  // 将参数类型从 any 改为 unknown，与 ipcHandler 保持一致
  readStore: (fileName, defaultValue) => electron.ipcRenderer.invoke("read-store", fileName, defaultValue),
  writeStore: (fileName, data) => electron.ipcRenderer.invoke("write-store", fileName, data),
  // 新增：列出聊天会话文件
  listChatSessions: () => electron.ipcRenderer.invoke("list-chat-sessions"),
  // 新增：删除聊天会话文件
  deleteChatSession: (fileName) => electron.ipcRenderer.invoke("delete-chat-session", fileName),
  // --- Chat Session API (Save only, List/Delete/Read via Store API) ---
  saveChatSession: (sessionId, data) => (
    // <-- 新增保存聊天会话 API
    electron.ipcRenderer.invoke("save-chat-session", sessionId, data)
  ),
  // --- Character Data API ---
  listCharacters: () => electron.ipcRenderer.invoke("list-characters"),
  saveCharacter: (character) => electron.ipcRenderer.invoke("save-character", character),
  deleteCharacter: (characterId) => (
    // <-- 参数改为 characterId
    electron.ipcRenderer.invoke("delete-character", characterId)
  ),
  // <-- 传递 characterId
  // --- Script Data API ---
  listScripts: () => electron.ipcRenderer.invoke("list-scripts"),
  saveScript: (script) => electron.ipcRenderer.invoke("save-script", script),
  deleteScript: (scriptId) => (
    // <-- 参数改为 scriptId
    electron.ipcRenderer.invoke("delete-script", scriptId)
  ),
  // <-- 传递 scriptId
  // --- LLM 服务相关 API ---
  llmGetServices: () => electron.ipcRenderer.invoke("llm-get-services"),
  llmSetApiKey: (providerId, apiKey) => electron.ipcRenderer.invoke("llm-set-api-key", providerId, apiKey),
  llmGetAvailableModels: (providerId) => electron.ipcRenderer.invoke("llm-get-available-models", providerId),
  // 新增获取已保存 Keys 的 API
  llmGetSavedKeys: () => electron.ipcRenderer.invoke("llm-get-saved-keys"),
  // 新增：调用聊天生成 API
  // 需要在调用处确保 options 符合 LLMChatOptions 结构 (从 './llm/BaseLLM' 导入)
  // 返回值 data 符合 LLMResponse 结构
  llmGenerateChat: (providerId, options) => electron.ipcRenderer.invoke("llm-generate-chat", providerId, options),
  // 新增：调用流式聊天生成 API (只负责启动，实际数据通过 onLLMStreamChunk 接收)
  llmGenerateChatStream: (providerId, options) => electron.ipcRenderer.invoke("llm-generate-chat-stream", providerId, options),
  // 新增：获取和保存自定义模型列表
  llmGetCustomModels: (providerId) => electron.ipcRenderer.invoke("llm-get-custom-models", providerId),
  llmSaveCustomModels: (providerId, models) => electron.ipcRenderer.invoke("llm-save-custom-models", providerId, models),
  // --- 代理相关 API ---
  proxyGetConfig: () => electron.ipcRenderer.invoke("proxy-get-config"),
  proxySetConfig: (config) => electron.ipcRenderer.invoke("proxy-set-config", config),
  proxyTestConnection: () => electron.ipcRenderer.invoke("proxy-test-connection"),
  // 如果还需要通用的 on/off/send，可以在这里单独暴露，或者按需添加
  // on: (channel, listener) => { /* ... 安全实现 ... */ },
  // send: (channel, data) => { /* ... 安全实现 ... */ },
  // --- 新增：处理 LLM 流式响应 ---
  // 定义流式数据块的预期结构 (可以根据实际情况调整)
  // type LLMStreamChunk = { text?: string; error?: string; done?: boolean; usage?: object; metrics?: object; search?: object; mcpToolResponse?: object; generateImage?: object };
  // 暂时使用 unknown，在接收端进行类型检查
  onLLMStreamChunk: (listener) => {
    const channel = "llm-stream-chunk";
    const internalListener = (_event, chunkData) => {
      listener(chunkData);
    };
    electron.ipcRenderer.on(channel, internalListener);
    return {
      dispose: () => {
        electron.ipcRenderer.removeListener(channel, internalListener);
        mainLogger.info(`已移除监听器: ${channel}`);
      }
    };
  }
  // 你可以在这里暴露其他需要的 API。
});
function domReady(condition = ["complete", "interactive"]) {
  return new Promise((resolve) => {
    if (condition.includes(document.readyState)) {
      resolve(true);
    } else {
      document.addEventListener("readystatechange", () => {
        if (condition.includes(document.readyState)) {
          resolve(true);
        }
      });
    }
  });
}
const safeDOM = {
  append(parent, child) {
    if (!Array.from(parent.children).find((e) => e === child)) {
      return parent.appendChild(child);
    }
  },
  remove(parent, child) {
    if (Array.from(parent.children).find((e) => e === child)) {
      return parent.removeChild(child);
    }
  }
};
function createLoadingIndicator() {
  const className = `loaders-css__square-spin`;
  const styleContent = `
@keyframes square-spin {
  25% { transform: perspective(100px) rotateX(180deg) rotateY(0); }
  50% { transform: perspective(100px) rotateX(180deg) rotateY(180deg); }
  75% { transform: perspective(100px) rotateX(0) rotateY(180deg); }
  100% { transform: perspective(100px) rotateX(0) rotateY(0); }
}
.${className} > div {
  animation-fill-mode: both;
  width: 50px;
  height: 50px;
  background: #fff;
  animation: square-spin 3s 0s cubic-bezier(0.09, 0.57, 0.49, 0.9) infinite;
}
.app-loading-wrap {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #282c34;
  z-index: 9;
}
    `;
  const oStyle = document.createElement("style");
  const oDiv = document.createElement("div");
  oStyle.id = "app-loading-style";
  oStyle.innerHTML = styleContent;
  oDiv.className = "app-loading-wrap";
  oDiv.innerHTML = `<div class="${className}"><div></div></div>`;
  return {
    appendLoading() {
      safeDOM.append(document.head, oStyle);
      safeDOM.append(document.body, oDiv);
    },
    removeLoading() {
      safeDOM.remove(document.head, oStyle);
      safeDOM.remove(document.body, oDiv);
    }
  };
}
const { appendLoading, removeLoading } = createLoadingIndicator();
domReady().then(appendLoading);
window.onmessage = (ev) => {
  if (ev.data && ev.data.payload === "removeLoading") {
    mainLogger.info("收到移除加载指示器的消息");
    removeLoading();
  }
};
setTimeout(removeLoading, 4999);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5tanMiLCJzb3VyY2VzIjpbIi4uL2VsZWN0cm9uL3V0aWxzL2xvZ1R5cGVzLnRzIiwiLi4vZWxlY3Ryb24vdXRpbHMvbG9nQ29uZmlnLnRzIiwiLi4vZWxlY3Ryb24vdXRpbHMvbG9nZ2VyLnRzIiwiLi4vZWxlY3Ryb24vdXRpbHMvZW5jb2RpbmcudHMiLCIuLi9lbGVjdHJvbi9wcmVsb2FkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5pel5b+X57G75Z6L5a6a5LmJXG4gKiDljIXlkKvml6Xlv5fnuqfliKvmnprkuL7lkozml6Xlv5fphY3nva7mjqXlj6NcbiAqL1xuXG4vLyDml6Xlv5fnuqfliKvmnprkuL5cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgREVCVUcgPSAwLFxuICBJTkZPID0gMSxcbiAgV0FSTiA9IDIsXG4gIEVSUk9SID0gMyxcbn1cblxuLy8g5pel5b+X6YWN572u5o6l5Y+jXG5leHBvcnQgaW50ZXJmYWNlIExvZ0NvbmZpZyB7XG4gIC8vIOWFqOWxgOaXpeW/l+e6p+WIq1xuICBnbG9iYWxMZXZlbDogTG9nTGV2ZWw7XG4gIC8vIOWQhOaooeWdl+aXpeW/l+e6p+WIq1xuICBtb2R1bGVMZXZlbHM6IHtcbiAgICBtYWluOiBMb2dMZXZlbDtcbiAgICBpcGM6IExvZ0xldmVsO1xuICAgIGxsbTogTG9nTGV2ZWw7XG4gICAgc3RvcmFnZTogTG9nTGV2ZWw7XG4gICAgcHJveHk6IExvZ0xldmVsO1xuICB9O1xuICAvLyDmmK/lkKblnKjml6Xlv5fkuK3mmL7npLrml7bpl7TmiLNcbiAgc2hvd1RpbWVzdGFtcDogYm9vbGVhbjtcbiAgLy8g5piv5ZCm5Zyo5o6n5Yi25Y+w6L6T5Ye65b2p6Imy5pel5b+XXG4gIGNvbG9yZnVsQ29uc29sZTogYm9vbGVhbjtcbiAgLy8g5piv5ZCm5bCG5pel5b+X5YaZ5YWl5paH5Lu2XG4gIGxvZ1RvRmlsZTogYm9vbGVhbjtcbiAgLy8g5pel5b+X5paH5Lu26Lev5b6EXG4gIGxvZ0ZpbGVQYXRoPzogc3RyaW5nO1xufVxuXG4vLyDml6Xlv5flmajphY3nva7mjqXlj6NcbmV4cG9ydCBpbnRlcmZhY2UgTG9nZ2VyQ29uZmlnIHtcbiAgbGV2ZWw6IExvZ0xldmVsOyAvLyDml6Xlv5fnuqfliKtcbiAgcHJlZml4Pzogc3RyaW5nOyAvLyDml6Xlv5fliY3nvIBcbiAgc2hvd1RpbWVzdGFtcD86IGJvb2xlYW47IC8vIOaYr+WQpuaYvuekuuaXtumXtOaIs1xuICBjb2xvcmZ1bENvbnNvbGU/OiBib29sZWFuOyAvLyDmmK/lkKblnKjmjqfliLblj7DovpPlh7rlvanoibLml6Xlv5dcbn1cbiIsIi8qKlxuICog5pel5b+X6YWN572u5paH5Lu2XG4gKiDnu5/kuIDnrqHnkIbml6Xlv5fovpPlh7rphY3nva5cbiAqL1xuaW1wb3J0IHsgTG9nTGV2ZWwsIExvZ0NvbmZpZyB9IGZyb20gJy4vbG9nVHlwZXMnO1xuXG4vKipcbiAqIOm7mOiupOaXpeW/l+mFjee9rlxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdExvZ0NvbmZpZzogTG9nQ29uZmlnID0ge1xuICBnbG9iYWxMZXZlbDogTG9nTGV2ZWwuREVCVUcsXG4gIG1vZHVsZUxldmVsczoge1xuICAgIG1haW46IExvZ0xldmVsLkRFQlVHLFxuICAgIGlwYzogTG9nTGV2ZWwuREVCVUcsXG4gICAgbGxtOiBMb2dMZXZlbC5ERUJVRyxcbiAgICBzdG9yYWdlOiBMb2dMZXZlbC5ERUJVRyxcbiAgICBwcm94eTogTG9nTGV2ZWwuREVCVUcsXG4gIH0sXG4gIHNob3dUaW1lc3RhbXA6IHRydWUsXG4gIGNvbG9yZnVsQ29uc29sZTogdHJ1ZSxcbiAgbG9nVG9GaWxlOiBmYWxzZSxcbn07XG5cbi8qKlxuICog6I635Y+W5pel5b+X6YWN572uXG4gKiBAcmV0dXJucyDml6Xlv5fphY3nva5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvZ0NvbmZpZygpOiBMb2dDb25maWcge1xuICAvLyDov5nph4zlj6/ku6Xku47phY3nva7mlofku7bmiJbnjq/looPlj5jph4/kuK3or7vlj5bphY3nva5cbiAgLy8g5pqC5pe26L+U5Zue6buY6K6k6YWN572uXG4gIHJldHVybiBkZWZhdWx0TG9nQ29uZmlnO1xufVxuXG4vKipcbiAqIOm7mOiupOWvvOWHulxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldExvZ0NvbmZpZyxcbiAgZGVmYXVsdExvZ0NvbmZpZyxcbn07XG4iLCIvKipcbiAqIOaXpeW/l+W3peWFt+exu1xuICog57uf5LiA566h55CG5pel5b+X6L6T5Ye677yM56Gu5L+d5omA5pyJ5pel5b+X6YO95L2/55So5rGJ6K+t77yM5bm25LiU6L6T5Ye65Yiw5o6n5Yi25Y+w5ZKM5byA5Y+R6ICF5bel5YW35pe25L2/55SoVVRGLTjnvJbnoIFcbiAqL1xuaW1wb3J0IHsgZ2V0TG9nQ29uZmlnIH0gZnJvbSAnLi9sb2dDb25maWcnO1xuaW1wb3J0IHsgTG9nTGV2ZWwsIExvZ2dlckNvbmZpZyB9IGZyb20gJy4vbG9nVHlwZXMnO1xuXG4vLyDmjqfliLblj7DpopzoibLku6PnoIFcbmVudW0gQ29uc29sZUNvbG9yIHtcbiAgUmVzZXQgPSAnXFx4MWJbMG0nLFxuICBGZ1JlZCA9ICdcXHgxYlszMW0nLFxuICBGZ1llbGxvdyA9ICdcXHgxYlszM20nLFxuICBGZ0N5YW4gPSAnXFx4MWJbMzZtJyxcbiAgRmdHcmF5ID0gJ1xceDFiWzkwbScsXG59XG5cbi8qKlxuICog5pel5b+X5bel5YW357G7XG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICBwcml2YXRlIGxldmVsOiBMb2dMZXZlbDtcbiAgcHJpdmF0ZSBwcmVmaXg6IHN0cmluZztcbiAgcHJpdmF0ZSBzaG93VGltZXN0YW1wOiBib29sZWFuO1xuICBwcml2YXRlIGNvbG9yZnVsQ29uc29sZTogYm9vbGVhbjtcblxuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqIEBwYXJhbSBjb25maWcg5pel5b+X6YWN572uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IExvZ2dlckNvbmZpZykge1xuICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9IGdldExvZ0NvbmZpZygpO1xuICAgIHRoaXMubGV2ZWwgPSBjb25maWcubGV2ZWw7XG4gICAgdGhpcy5wcmVmaXggPSBjb25maWcucHJlZml4IHx8ICcnO1xuICAgIHRoaXMuc2hvd1RpbWVzdGFtcCA9IGNvbmZpZy5zaG93VGltZXN0YW1wICE9PSB1bmRlZmluZWQgPyBjb25maWcuc2hvd1RpbWVzdGFtcCA6IGdsb2JhbENvbmZpZy5zaG93VGltZXN0YW1wO1xuICAgIHRoaXMuY29sb3JmdWxDb25zb2xlID0gY29uZmlnLmNvbG9yZnVsQ29uc29sZSAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmNvbG9yZnVsQ29uc29sZSA6IGdsb2JhbENvbmZpZy5jb2xvcmZ1bENvbnNvbGU7XG4gIH1cblxuICAvKipcbiAgICog5qC85byP5YyW5pel5b+X5raI5oGvXG4gICAqIEBwYXJhbSBsZXZlbCDml6Xlv5fnuqfliKtcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5pel5b+X5raI5oGvXG4gICAqIEBwYXJhbSBhcmdzIOmineWkluWPguaVsFxuICAgKiBAcmV0dXJucyDmoLzlvI/ljJblkI7nmoTml6Xlv5fmtojmga9cbiAgICovXG4gIHByaXZhdGUgZm9ybWF0TWVzc2FnZShsZXZlbDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IHN0cmluZyB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5zaG93VGltZXN0YW1wID8gYFske25ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoJ3poLUNOJyl9XSBgIDogJyc7XG4gICAgY29uc3QgcHJlZml4ID0gdGhpcy5wcmVmaXggPyBgWyR7dGhpcy5wcmVmaXh9XSBgIDogJyc7XG4gICAgY29uc3QgbGV2ZWxTdHIgPSBgWyR7bGV2ZWx9XSBgO1xuXG4gICAgLy8g5bCG6Z2e5a2X56ym5Liy5Y+C5pWw6L2s5o2i5Li65a2X56ym5LiyXG4gICAgY29uc3QgZm9ybWF0dGVkQXJncyA9IGFyZ3MubWFwKGFyZyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhhcmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gU3RyaW5nKGFyZyk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBiYXNlTWVzc2FnZSA9IGAke3RpbWVzdGFtcH0ke3ByZWZpeH0ke2xldmVsU3RyfSR7bWVzc2FnZX0gJHtmb3JtYXR0ZWRBcmdzLmpvaW4oJyAnKX1gLnRyaW0oKTtcblxuICAgIC8vIOWmguaenOWQr+eUqOS6huW9qeiJsui+k+WHuu+8jOagueaNruaXpeW/l+e6p+WIq+a3u+WKoOminOiJslxuICAgIGlmICh0aGlzLmNvbG9yZnVsQ29uc29sZSkge1xuICAgICAgaWYgKGxldmVsID09PSAn6ZSZ6K+vJykge1xuICAgICAgICByZXR1cm4gYCR7Q29uc29sZUNvbG9yLkZnUmVkfSR7YmFzZU1lc3NhZ2V9JHtDb25zb2xlQ29sb3IuUmVzZXR9YDsgLy8g57qi6ImyXG4gICAgICB9IGVsc2UgaWYgKGxldmVsID09PSAn6K2m5ZGKJykge1xuICAgICAgICByZXR1cm4gYCR7Q29uc29sZUNvbG9yLkZnWWVsbG93fSR7YmFzZU1lc3NhZ2V9JHtDb25zb2xlQ29sb3IuUmVzZXR9YDsgLy8g6buE6ImyXG4gICAgICB9IGVsc2UgaWYgKGxldmVsID09PSAn5L+h5oGvJykge1xuICAgICAgICByZXR1cm4gYCR7Q29uc29sZUNvbG9yLkZnQ3lhbn0ke2Jhc2VNZXNzYWdlfSR7Q29uc29sZUNvbG9yLlJlc2V0fWA7IC8vIOmdkuiJslxuICAgICAgfSBlbHNlIGlmIChsZXZlbCA9PT0gJ+iwg+ivlScpIHtcbiAgICAgICAgcmV0dXJuIGAke0NvbnNvbGVDb2xvci5GZ0dyYXl9JHtiYXNlTWVzc2FnZX0ke0NvbnNvbGVDb2xvci5SZXNldH1gOyAvLyDngbDoibJcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZU1lc3NhZ2U7XG4gIH1cblxuICAvKipcbiAgICog56Gu5L+d5a2X56ym5Liy5L2/55SoVVRGLTjnvJbnoIFcbiAgICog6L+Z5Liq5Ye95pWw5ZyoV2luZG93c+e7iOerr+S4reeJueWIq+acieeUqFxuICAgKiBAcGFyYW0gc3RyIOi+k+WFpeWtl+espuS4slxuICAgKiBAcmV0dXJucyBVVEYtOOe8lueggeeahOWtl+espuS4slxuICAgKi9cbiAgcHJpdmF0ZSBlbnN1cmVVdGY4KHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyDlnKhXaW5kb3dz5bmz5Y+w5LiK77yM57uI56uv5Y+v6IO95LiN5L2/55SoVVRGLTjnvJbnoIFcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g5bCd6K+V5bCG5a2X56ym5Liy6L2s5o2i5Li6QnVmZmVy5YaN6L2s5Zue5a2X56ym5Liy77yM56Gu5L+dVVRGLTjnvJbnoIFcbiAgICAgICAgLy8g5L2/55SoQnVmZmVyLmZyb20oc3RyLCAndXRmOCcp5Yib5bu65LiA5LiqVVRGLTjnvJbnoIHnmoRCdWZmZXJcbiAgICAgICAgLy8g54S25ZCO5L2/55SodG9TdHJpbmcoJ3V0ZjgnKeWwhkJ1ZmZlcui9rOaNouWbnuWtl+espuS4slxuICAgICAgICAvLyDov5nmoLflj6/ku6Xnoa7kv53lrZfnrKbkuLLkvb/nlKhVVEYtOOe8lueggVxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAndXRmOCcpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIHN0cjsgLy8g5aaC5p6c6L2s5o2i5aSx6LSl77yM6L+U5Zue5Y6f5aeL5a2X56ym5LiyXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7IC8vIOmdnldpbmRvd3PlubPlj7Dnm7TmjqXov5Tlm55cbiAgfVxuXG4gIC8qKlxuICAgKiDovpPlh7rosIPor5XnuqfliKvml6Xlv5dcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5pel5b+X5raI5oGvXG4gICAqIEBwYXJhbSBhcmdzIOmineWkluWPguaVsFxuICAgKi9cbiAgZGVidWcobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSBMb2dMZXZlbC5ERUJVRykge1xuICAgICAgY29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHRoaXMuZm9ybWF0TWVzc2FnZSgn6LCD6K+VJywgbWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmVuc3VyZVV0ZjgoZm9ybWF0dGVkTWVzc2FnZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDovpPlh7rkv6Hmga/nuqfliKvml6Xlv5dcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5pel5b+X5raI5oGvXG4gICAqIEBwYXJhbSBhcmdzIOmineWkluWPguaVsFxuICAgKi9cbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxldmVsIDw9IExvZ0xldmVsLklORk8pIHtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSB0aGlzLmZvcm1hdE1lc3NhZ2UoJ+S/oeaBrycsIG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgY29uc29sZS5sb2codGhpcy5lbnN1cmVVdGY4KGZvcm1hdHRlZE1lc3NhZ2UpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6L6T5Ye66K2m5ZGK57qn5Yir5pel5b+XXG4gICAqIEBwYXJhbSBtZXNzYWdlIOaXpeW/l+a2iOaBr1xuICAgKiBAcGFyYW0gYXJncyDpop3lpJblj4LmlbBcbiAgICovXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSBMb2dMZXZlbC5XQVJOKSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gdGhpcy5mb3JtYXRNZXNzYWdlKCforablkYonLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICAgIGNvbnNvbGUud2Fybih0aGlzLmVuc3VyZVV0ZjgoZm9ybWF0dGVkTWVzc2FnZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDovpPlh7rplJnor6/nuqfliKvml6Xlv5dcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5pel5b+X5raI5oGvXG4gICAqIEBwYXJhbSBhcmdzIOmineWkluWPguaVsFxuICAgKi9cbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSBMb2dMZXZlbC5FUlJPUikge1xuICAgICAgY29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHRoaXMuZm9ybWF0TWVzc2FnZSgn6ZSZ6K+vJywgbWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICBjb25zb2xlLmVycm9yKHRoaXMuZW5zdXJlVXRmOChmb3JtYXR0ZWRNZXNzYWdlKSk7XG4gICAgfVxuICB9XG59XG5cbi8vIOWIm+W7uum7mOiupOaXpeW/l+WunuS+i1xuZXhwb3J0IGNvbnN0IG1haW5Mb2dnZXIgPSBuZXcgTG9nZ2VyKHsgbGV2ZWw6IExvZ0xldmVsLkRFQlVHLCBwcmVmaXg6ICfkuLvov5vnqIsnIH0pO1xuZXhwb3J0IGNvbnN0IGlwY0xvZ2dlciA9IG5ldyBMb2dnZXIoeyBsZXZlbDogTG9nTGV2ZWwuREVCVUcsIHByZWZpeDogJ0lQQycgfSk7XG5leHBvcnQgY29uc3QgbGxtTG9nZ2VyID0gbmV3IExvZ2dlcih7IGxldmVsOiBMb2dMZXZlbC5ERUJVRywgcHJlZml4OiAnTExNJyB9KTtcbmV4cG9ydCBjb25zdCBzdG9yYWdlTG9nZ2VyID0gbmV3IExvZ2dlcih7IGxldmVsOiBMb2dMZXZlbC5ERUJVRywgcHJlZml4OiAn5a2Y5YKoJyB9KTtcbmV4cG9ydCBjb25zdCBwcm94eUxvZ2dlciA9IG5ldyBMb2dnZXIoeyBsZXZlbDogTG9nTGV2ZWwuREVCVUcsIHByZWZpeDogJ+S7o+eQhicgfSk7XG5cbi8vIOWvvOWHuum7mOiupOaXpeW/l+WHveaVsO+8jOaWueS+v+ebtOaOpeS9v+eUqFxuZXhwb3J0IGRlZmF1bHQge1xuICBkZWJ1ZzogbWFpbkxvZ2dlci5kZWJ1Zy5iaW5kKG1haW5Mb2dnZXIpLFxuICBpbmZvOiBtYWluTG9nZ2VyLmluZm8uYmluZChtYWluTG9nZ2VyKSxcbiAgd2FybjogbWFpbkxvZ2dlci53YXJuLmJpbmQobWFpbkxvZ2dlciksXG4gIGVycm9yOiBtYWluTG9nZ2VyLmVycm9yLmJpbmQobWFpbkxvZ2dlciksXG59O1xuIiwiLyoqXG4gKiDnvJbnoIHlt6XlhbfnsbtcbiAqIOe7n+S4gOeuoeeQhue8lueggeiuvue9ru+8jOehruS/neaJgOaciea2ieWPiue8lueggeeahOWcsOaWuemDveS9v+eUqFVURi04XG4gKi9cblxuLyoqXG4gKiDorr7nva7lhajlsYDnvJbnoIHkuLpVVEYtOFxuICog6L+Z5Liq5Ye95pWw5bqU6K+l5Zyo5bqU55So5ZCv5Yqo5pe26LCD55SoXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXR1cEdsb2JhbEVuY29kaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAvLyDorr7nva5Ob2RlLmpz6L+b56iL55qE57yW56CBXG4gIHByb2Nlc3MuZW52LkxBTkcgPSAnemhfQ04uVVRGLTgnO1xuICBwcm9jZXNzLmVudi5MQ19BTEwgPSAnemhfQ04uVVRGLTgnO1xuICBwcm9jZXNzLmVudi5MQ19DVFlQRSA9ICd6aF9DTi5VVEYtOCc7XG5cbiAgLy8g6K6+572u5o6n5Yi25Y+w6L6T5Ye657yW56CBXG4gIGlmIChwcm9jZXNzLnN0ZG91dC5pc1RUWSkge1xuICAgIHByb2Nlc3Muc3Rkb3V0LnNldERlZmF1bHRFbmNvZGluZygndXRmOCcpO1xuICB9XG4gIGlmIChwcm9jZXNzLnN0ZGVyci5pc1RUWSkge1xuICAgIHByb2Nlc3Muc3RkZXJyLnNldERlZmF1bHRFbmNvZGluZygndXRmOCcpO1xuICB9XG5cbiAgLy8g5rOo5oSP77ya5oiR5Lus5LiN5YaN5Zyo6L+Z6YeM6K6+572uV2luZG93c+aOp+WItuWPsOS7o+eggemhtVxuICAvLyDov5nkuKrmk43kvZzlt7Lnu4/np7vliLBtYWluLnRz5Lit77yM5Lul6YG/5YWN6YeN5aSN5omn6KGMXG59XG5cbi8qKlxuICog5paH5Lu26K+75YaZ6YCJ6aG577yM5by65Yi25L2/55SoVVRGLTjnvJbnoIFcbiAqL1xuZXhwb3J0IGNvbnN0IFVURjhfT1BUSU9OUyA9IHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSBhcyBjb25zdDtcblxuLyoqXG4gKiDnoa7kv53lrZfnrKbkuLLkvb/nlKhVVEYtOOe8lueggVxuICog6L+Z5Liq5Ye95pWw5ZyoV2luZG93c+e7iOerr+S4reeJueWIq+acieeUqFxuICogQHBhcmFtIHN0ciDovpPlhaXlrZfnrKbkuLJcbiAqIEByZXR1cm5zIFVURi0457yW56CB55qE5a2X56ym5LiyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVVdGY4KHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8g5ZyoV2luZG93c+W5s+WPsOS4iu+8jOe7iOerr+WPr+iDveS4jeS9v+eUqFVURi0457yW56CBXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOWwneivleWwhuWtl+espuS4sui9rOaNouS4ukJ1ZmZlcuWGjei9rOWbnuWtl+espuS4su+8jOehruS/nVVURi0457yW56CBXG4gICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAndXRmOCcpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+i9rOaNouWtl+espuS4suWIsFVURi0457yW56CB5pe25Ye66ZSZOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBzdHI7IC8vIOWmguaenOi9rOaNouWksei0pe+8jOi/lOWbnuWOn+Wni+Wtl+espuS4slxuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyOyAvLyDpnZ5XaW5kb3dz5bmz5Y+w55u05o6l6L+U5ZueXG59XG5cbi8qKlxuICog6buY6K6k5a+85Ye6XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0dXBHbG9iYWxFbmNvZGluZyxcbiAgVVRGOF9PUFRJT05TLFxuICBlbnN1cmVVdGY4LFxufTtcbiIsImltcG9ydCB7IGNvbnRleHRCcmlkZ2UsIGlwY1JlbmRlcmVyIH0gZnJvbSAnZWxlY3Ryb24nO1xyXG5pbXBvcnQgdHlwZSB7IExMTUNoYXRPcHRpb25zLCBMTE1SZXNwb25zZSB9IGZyb20gJy4vbGxtL0Jhc2VMTE0nO1xyXG5pbXBvcnQgdHlwZSB7IFByb3h5Q29uZmlnIH0gZnJvbSAnLi9Qcm94eU1hbmFnZXInO1xyXG4vLyDlr7zlhaXop5LoibLlkozliafmnKznsbvlnovvvIznoa7kv53kuI7lkI7nq6/lkozliY3nq6/kvb/nlKjnmoTnsbvlnovkuIDoh7RcclxuaW1wb3J0IHR5cGUgeyBBSUNoYXJhY3RlciwgU2NyaXB0IH0gZnJvbSAnLi4vc3JjL3R5cGVzJztcclxuaW1wb3J0IHsgbWFpbkxvZ2dlciBhcyBsb2dnZXIgfSBmcm9tICcuL3V0aWxzL2xvZ2dlcic7IC8vIOWvvOWFpeaXpeW/l+W3peWFt1xyXG5pbXBvcnQgeyBzZXR1cEdsb2JhbEVuY29kaW5nIH0gZnJvbSAnLi91dGlscy9lbmNvZGluZyc7IC8vIOWvvOWFpee8lueggeW3peWFt1xyXG5cclxuLy8g6K6+572u5YWo5bGA57yW56CB5Li6VVRGLThcclxuc2V0dXBHbG9iYWxFbmNvZGluZygpLmNhdGNoKGVyciA9PiB7XHJcbiAgY29uc29sZS5lcnJvcign6K6+572u5YWo5bGA57yW56CB5pe25Ye66ZSZOicsIGVycik7XHJcbn0pO1xyXG5cclxuLy8gLS0tLS0tLS0tIOWQkea4suafk+i/m+eoi+aatOmcsumAieaLqeaAp+eahCBBUEkgLS0tLS0tLS0tXHJcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2VsZWN0cm9uQVBJJywgeyAvLyDkvb/nlKjkuI3lkIznmoTplK7lkI3vvIzpgb/lhY3opobnm5blj6/og73lrZjlnKjnmoTlhbbku5YgaXBjUmVuZGVyZXIg5pq06ZyyXHJcbiAgLy8gLS0tIOeyvuehruaatOmcsuWtmOWCqOebuOWFs+eahCBpbnZva2Ug6YCa6YGTIC0tLVxyXG4gIC8vIOWwhuWPguaVsOexu+Wei+S7jiBhbnkg5pS55Li6IHVua25vd27vvIzkuI4gaXBjSGFuZGxlciDkv53mjIHkuIDoh7RcclxuICByZWFkU3RvcmU6IChmaWxlTmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHVua25vd24pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IHVua25vd247IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ3JlYWQtc3RvcmUnLCBmaWxlTmFtZSwgZGVmYXVsdFZhbHVlKSxcclxuICB3cml0ZVN0b3JlOiAoZmlsZU5hbWU6IHN0cmluZywgZGF0YTogdW5rbm93bik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCd3cml0ZS1zdG9yZScsIGZpbGVOYW1lLCBkYXRhKSxcclxuICAvLyDmlrDlop7vvJrliJflh7rogYrlpKnkvJror53mlofku7ZcclxuICBsaXN0Q2hhdFNlc3Npb25zOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBzdHJpbmdbXTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGlzdC1jaGF0LXNlc3Npb25zJyksXHJcbiAgLy8g5paw5aKe77ya5Yig6Zmk6IGK5aSp5Lya6K+d5paH5Lu2XHJcbiAgZGVsZXRlQ2hhdFNlc3Npb246IChmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1jaGF0LXNlc3Npb24nLCBmaWxlTmFtZSksXHJcblxyXG4gIC8vIC0tLSBDaGF0IFNlc3Npb24gQVBJIChTYXZlIG9ubHksIExpc3QvRGVsZXRlL1JlYWQgdmlhIFN0b3JlIEFQSSkgLS0tXHJcbiAgc2F2ZUNoYXRTZXNzaW9uOiAoc2Vzc2lvbklkOiBzdHJpbmcsIGRhdGE6IHVua25vd24pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4gPT4gLy8gPC0tIOaWsOWinuS/neWtmOiBiuWkqeS8muivnSBBUElcclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnc2F2ZS1jaGF0LXNlc3Npb24nLCBzZXNzaW9uSWQsIGRhdGEpLFxyXG5cclxuICAvLyAtLS0gQ2hhcmFjdGVyIERhdGEgQVBJIC0tLVxyXG4gIGxpc3RDaGFyYWN0ZXJzOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBBSUNoYXJhY3RlcltdOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdsaXN0LWNoYXJhY3RlcnMnKSxcclxuICBzYXZlQ2hhcmFjdGVyOiAoY2hhcmFjdGVyOiBBSUNoYXJhY3Rlcik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdzYXZlLWNoYXJhY3RlcicsIGNoYXJhY3RlciksXHJcbiAgZGVsZXRlQ2hhcmFjdGVyOiAoY2hhcmFjdGVySWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PiAvLyA8LS0g5Y+C5pWw5pS55Li6IGNoYXJhY3RlcklkXHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1jaGFyYWN0ZXInLCBjaGFyYWN0ZXJJZCksIC8vIDwtLSDkvKDpgJIgY2hhcmFjdGVySWRcclxuXHJcbiAgLy8gLS0tIFNjcmlwdCBEYXRhIEFQSSAtLS1cclxuICBsaXN0U2NyaXB0czogKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogU2NyaXB0W107IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xpc3Qtc2NyaXB0cycpLFxyXG4gIHNhdmVTY3JpcHQ6IChzY3JpcHQ6IFNjcmlwdCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdzYXZlLXNjcmlwdCcsIHNjcmlwdCksXHJcbiAgZGVsZXRlU2NyaXB0OiAoc2NyaXB0SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PiAvLyA8LS0g5Y+C5pWw5pS55Li6IHNjcmlwdElkXHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1zY3JpcHQnLCBzY3JpcHRJZCksIC8vIDwtLSDkvKDpgJIgc2NyaXB0SWRcclxuXHJcbiAgLy8gLS0tIExMTSDmnI3liqHnm7jlhbMgQVBJIC0tLVxyXG4gIGxsbUdldFNlcnZpY2VzOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiB7IHByb3ZpZGVySWQ6IHN0cmluZzsgcHJvdmlkZXJOYW1lOiBzdHJpbmc7IGRlZmF1bHRNb2RlbHM6IHN0cmluZ1tdIH1bXTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGxtLWdldC1zZXJ2aWNlcycpLFxyXG4gIGxsbVNldEFwaUtleTogKHByb3ZpZGVySWQ6IHN0cmluZywgYXBpS2V5OiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1zZXQtYXBpLWtleScsIHByb3ZpZGVySWQsIGFwaUtleSksXHJcbiAgbGxtR2V0QXZhaWxhYmxlTW9kZWxzOiAocHJvdmlkZXJJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBzdHJpbmdbXTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGxtLWdldC1hdmFpbGFibGUtbW9kZWxzJywgcHJvdmlkZXJJZCksXHJcbiAgLy8g5paw5aKe6I635Y+W5bey5L+d5a2YIEtleXMg55qEIEFQSVxyXG4gIGxsbUdldFNhdmVkS2V5czogKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVsbD47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1nZXQtc2F2ZWQta2V5cycpLFxyXG4vLyDmlrDlop7vvJrosIPnlKjogYrlpKnnlJ/miJAgQVBJXHJcbiAgIC8vIOmcgOimgeWcqOiwg+eUqOWkhOehruS/nSBvcHRpb25zIOespuWQiCBMTE1DaGF0T3B0aW9ucyDnu5PmnoQgKOS7jiAnLi9sbG0vQmFzZUxMTScg5a+85YWlKVxyXG4gICAvLyDov5Tlm57lgLwgZGF0YSDnrKblkIggTExNUmVzcG9uc2Ug57uT5p6EXHJcbiAgIGxsbUdlbmVyYXRlQ2hhdDogKHByb3ZpZGVySWQ6IHN0cmluZywgb3B0aW9uczogTExNQ2hhdE9wdGlvbnMpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IExMTVJlc3BvbnNlOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGxtLWdlbmVyYXRlLWNoYXQnLCBwcm92aWRlcklkLCBvcHRpb25zKSxcclxuICAvLyDmlrDlop7vvJrosIPnlKjmtYHlvI/ogYrlpKnnlJ/miJAgQVBJICjlj6rotJ/otKPlkK/liqjvvIzlrp7pmYXmlbDmja7pgJrov4cgb25MTE1TdHJlYW1DaHVuayDmjqXmlLYpXHJcbiAgbGxtR2VuZXJhdGVDaGF0U3RyZWFtOiAocHJvdmlkZXJJZDogc3RyaW5nLCBvcHRpb25zOiBMTE1DaGF0T3B0aW9ucyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKCdsbG0tZ2VuZXJhdGUtY2hhdC1zdHJlYW0nLCBwcm92aWRlcklkLCBvcHRpb25zKSxcclxuLy8g5paw5aKe77ya6I635Y+W5ZKM5L+d5a2Y6Ieq5a6a5LmJ5qih5Z6L5YiX6KGoXHJcbiAgbGxtR2V0Q3VzdG9tTW9kZWxzOiAocHJvdmlkZXJJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBzdHJpbmdbXTsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgIGlwY1JlbmRlcmVyLmludm9rZSgnbGxtLWdldC1jdXN0b20tbW9kZWxzJywgcHJvdmlkZXJJZCksXHJcbiAgIGxsbVNhdmVDdXN0b21Nb2RlbHM6IChwcm92aWRlcklkOiBzdHJpbmcsIG1vZGVsczogc3RyaW5nW10pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2xsbS1zYXZlLWN1c3RvbS1tb2RlbHMnLCBwcm92aWRlcklkLCBtb2RlbHMpLFxyXG5cclxuICAgLy8gLS0tIOS7o+eQhuebuOWFsyBBUEkgLS0tXHJcbiAgIHByb3h5R2V0Q29uZmlnOiAoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBQcm94eUNvbmZpZzsgZXJyb3I/OiBzdHJpbmcgfT4gPT5cclxuICAgICBpcGNSZW5kZXJlci5pbnZva2UoJ3Byb3h5LWdldC1jb25maWcnKSxcclxuICAgcHJveHlTZXRDb25maWc6IChjb25maWc6IFByb3h5Q29uZmlnKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+ID0+XHJcbiAgICAgaXBjUmVuZGVyZXIuaW52b2tlKCdwcm94eS1zZXQtY29uZmlnJywgY29uZmlnKSxcclxuICAgcHJveHlUZXN0Q29ubmVjdGlvbjogKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogeyBpcDogc3RyaW5nOyBwcm94eVVybDogc3RyaW5nOyBwcm94eU1vZGU6IHN0cmluZyB9OyBlcnJvcj86IHN0cmluZyB9PiA9PlxyXG4gICAgIGlwY1JlbmRlcmVyLmludm9rZSgncHJveHktdGVzdC1jb25uZWN0aW9uJyksXHJcblxyXG4gIC8vIOWmguaenOi/mOmcgOimgemAmueUqOeahCBvbi9vZmYvc2VuZO+8jOWPr+S7peWcqOi/memHjOWNleeLrOaatOmcsu+8jOaIluiAheaMiemcgOa3u+WKoFxyXG4gIC8vIG9uOiAoY2hhbm5lbCwgbGlzdGVuZXIpID0+IHsgLyogLi4uIOWuieWFqOWunueOsCAuLi4gKi8gfSxcclxuICAvLyBzZW5kOiAoY2hhbm5lbCwgZGF0YSkgPT4geyAvKiAuLi4g5a6J5YWo5a6e546wIC4uLiAqLyB9LFxyXG5cclxuICAvLyAtLS0g5paw5aKe77ya5aSE55CGIExMTSDmtYHlvI/lk43lupQgLS0tXHJcbiAgLy8g5a6a5LmJ5rWB5byP5pWw5o2u5Z2X55qE6aKE5pyf57uT5p6EICjlj6/ku6XmoLnmja7lrp7pmYXmg4XlhrXosIPmlbQpXHJcbiAgLy8gdHlwZSBMTE1TdHJlYW1DaHVuayA9IHsgdGV4dD86IHN0cmluZzsgZXJyb3I/OiBzdHJpbmc7IGRvbmU/OiBib29sZWFuOyB1c2FnZT86IG9iamVjdDsgbWV0cmljcz86IG9iamVjdDsgc2VhcmNoPzogb2JqZWN0OyBtY3BUb29sUmVzcG9uc2U/OiBvYmplY3Q7IGdlbmVyYXRlSW1hZ2U/OiBvYmplY3QgfTtcclxuICAvLyDmmoLml7bkvb/nlKggdW5rbm93bu+8jOWcqOaOpeaUtuerr+i/m+ihjOexu+Wei+ajgOafpVxyXG4gIG9uTExNU3RyZWFtQ2h1bms6IChsaXN0ZW5lcjogKGNodW5rRGF0YTogdW5rbm93bikgPT4gdm9pZCk6IHsgZGlzcG9zZTogKCkgPT4gdm9pZCB9ID0+IHtcclxuICAgIGNvbnN0IGNoYW5uZWwgPSAnbGxtLXN0cmVhbS1jaHVuayc7XHJcbiAgICAvLyDkvb/nlKjkuIDkuKrljIXoo4Xlh73mlbDmnaXnoa7kv53nsbvlnovlronlhajlkozlpITnkIYgZXZlbnQg5Y+C5pWwXHJcbiAgICBjb25zdCBpbnRlcm5hbExpc3RlbmVyID0gKF9ldmVudDogRWxlY3Ryb24uSXBjUmVuZGVyZXJFdmVudCwgY2h1bmtEYXRhOiB1bmtub3duKSA9PiB7XHJcbiAgICAgICAgbGlzdGVuZXIoY2h1bmtEYXRhKTtcclxuICAgIH07XHJcbiAgICBpcGNSZW5kZXJlci5vbihjaGFubmVsLCBpbnRlcm5hbExpc3RlbmVyKTtcclxuICAgIC8vIOi/lOWbnuS4gOS4quWMheWQqyBkaXNwb3NlIOaWueazleeahOWvueixoe+8jOeUqOS6juWPlua2iOebkeWQrFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGlzcG9zZTogKCkgPT4ge1xyXG4gICAgICAgIGlwY1JlbmRlcmVyLnJlbW92ZUxpc3RlbmVyKGNoYW5uZWwsIGludGVybmFsTGlzdGVuZXIpO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKGDlt7Lnp7vpmaTnm5HlkKzlmag6ICR7Y2hhbm5lbH1gKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICAvLyDkvaDlj6/ku6XlnKjov5nph4zmmrTpnLLlhbbku5bpnIDopoHnmoQgQVBJ44CCXHJcbn0pO1xyXG5cclxuLy8gLS0tLS0tLS0tIOmihOWKoOi9veiEmuacrOWKoOi9vSAtLS0tLS0tLS1cclxuZnVuY3Rpb24gZG9tUmVhZHkoY29uZGl0aW9uOiBEb2N1bWVudFJlYWR5U3RhdGVbXSA9IFsnY29tcGxldGUnLCAnaW50ZXJhY3RpdmUnXSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGlmIChjb25kaXRpb24uaW5jbHVkZXMoZG9jdW1lbnQucmVhZHlTdGF0ZSkpIHtcclxuICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbi5pbmNsdWRlcyhkb2N1bWVudC5yZWFkeVN0YXRlKSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBzYWZlRE9NID0ge1xyXG4gIGFwcGVuZChwYXJlbnQ6IEhUTUxFbGVtZW50LCBjaGlsZDogSFRNTEVsZW1lbnQpIHtcclxuICAgIGlmICghQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmZpbmQoZSA9PiBlID09PSBjaGlsZCkpIHtcclxuICAgICAgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICByZW1vdmUocGFyZW50OiBIVE1MRWxlbWVudCwgY2hpbGQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBpZiAoQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmZpbmQoZSA9PiBlID09PSBjaGlsZCkpIHtcclxuICAgICAgcmV0dXJuIHBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XHJcbiAgICB9XHJcbiAgfSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiDmnaXmupA6IGh0dHBzOi8vdG9iaWFzYWhsaW4uY29tL3NwaW5raXRcclxuICog77yI57qvIENTUyDliqjnlLvmlYjmnpzkvJjkuo4gSlMg5omn6KGM77yJXHJcbiAqL1xyXG4vLyDph43lkb3lkI3ku6Xpgb/lhY3lnKjpnZ4gUmVhY3Qg5paH5Lu25Lit6Kem5Y+RIEVTTGludCBob29rIOinhOWImemUmeivr1xyXG5mdW5jdGlvbiBjcmVhdGVMb2FkaW5nSW5kaWNhdG9yKCkge1xyXG4gIGNvbnN0IGNsYXNzTmFtZSA9IGBsb2FkZXJzLWNzc19fc3F1YXJlLXNwaW5gO1xyXG4gIGNvbnN0IHN0eWxlQ29udGVudCA9IGBcclxuQGtleWZyYW1lcyBzcXVhcmUtc3BpbiB7XHJcbiAgMjUlIHsgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDBweCkgcm90YXRlWCgxODBkZWcpIHJvdGF0ZVkoMCk7IH1cclxuICA1MCUgeyB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDEwMHB4KSByb3RhdGVYKDE4MGRlZykgcm90YXRlWSgxODBkZWcpOyB9XHJcbiAgNzUlIHsgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDBweCkgcm90YXRlWCgwKSByb3RhdGVZKDE4MGRlZyk7IH1cclxuICAxMDAlIHsgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDBweCkgcm90YXRlWCgwKSByb3RhdGVZKDApOyB9XHJcbn1cclxuLiR7Y2xhc3NOYW1lfSA+IGRpdiB7XHJcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxuICB3aWR0aDogNTBweDtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgYmFja2dyb3VuZDogI2ZmZjtcclxuICBhbmltYXRpb246IHNxdWFyZS1zcGluIDNzIDBzIGN1YmljLWJlemllcigwLjA5LCAwLjU3LCAwLjQ5LCAwLjkpIGluZmluaXRlO1xyXG59XHJcbi5hcHAtbG9hZGluZy13cmFwIHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDEwMHZ3O1xyXG4gIGhlaWdodDogMTAwdmg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGJhY2tncm91bmQ6ICMyODJjMzQ7XHJcbiAgei1pbmRleDogOTtcclxufVxyXG4gICAgYDtcclxuICBjb25zdCBvU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gIGNvbnN0IG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgb1N0eWxlLmlkID0gJ2FwcC1sb2FkaW5nLXN0eWxlJztcclxuICBvU3R5bGUuaW5uZXJIVE1MID0gc3R5bGVDb250ZW50O1xyXG4gIG9EaXYuY2xhc3NOYW1lID0gJ2FwcC1sb2FkaW5nLXdyYXAnO1xyXG4gIG9EaXYuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCIke2NsYXNzTmFtZX1cIj48ZGl2PjwvZGl2PjwvZGl2PmA7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBhcHBlbmRMb2FkaW5nKCkge1xyXG4gICAgICBzYWZlRE9NLmFwcGVuZChkb2N1bWVudC5oZWFkLCBvU3R5bGUpO1xyXG4gICAgICBzYWZlRE9NLmFwcGVuZChkb2N1bWVudC5ib2R5LCBvRGl2KTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVMb2FkaW5nKCkge1xyXG4gICAgICBzYWZlRE9NLnJlbW92ZShkb2N1bWVudC5oZWFkLCBvU3R5bGUpO1xyXG4gICAgICBzYWZlRE9NLnJlbW92ZShkb2N1bWVudC5ib2R5LCBvRGl2KTtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLy8g6LCD55So6YeN5ZG95ZCN5ZCO55qE5Ye95pWwXHJcbmNvbnN0IHsgYXBwZW5kTG9hZGluZywgcmVtb3ZlTG9hZGluZyB9ID0gY3JlYXRlTG9hZGluZ0luZGljYXRvcigpO1xyXG5kb21SZWFkeSgpLnRoZW4oYXBwZW5kTG9hZGluZyk7XHJcblxyXG53aW5kb3cub25tZXNzYWdlID0gKGV2OiBNZXNzYWdlRXZlbnQpID0+IHtcclxuICAvLyDkvb/nlKggaWYg6K+t5Y+l5Lul5o+Q6auY5riF5pmw5bqm77yM5ruh6LazIEVTTGludCDopoHmsYJcclxuICBpZiAoZXYuZGF0YSAmJiBldi5kYXRhLnBheWxvYWQgPT09ICdyZW1vdmVMb2FkaW5nJykge1xyXG4gICAgbG9nZ2VyLmluZm8oJ+aUtuWIsOenu+mZpOWKoOi9veaMh+ekuuWZqOeahOa2iOaBrycpO1xyXG4gICAgcmVtb3ZlTG9hZGluZygpO1xyXG4gIH1cclxufTtcclxuXHJcbnNldFRpbWVvdXQocmVtb3ZlTG9hZGluZywgNDk5OSk7Il0sIm5hbWVzIjpbIkxvZ0xldmVsIiwiY29udGV4dEJyaWRnZSIsImlwY1JlbmRlcmVyIiwibG9nZ2VyIl0sIm1hcHBpbmdzIjoiOztBQU1ZLElBQUEsNkJBQUFBLGNBQUw7QUFDTEEsWUFBQUEsVUFBQSxXQUFRLENBQVIsSUFBQTtBQUNBQSxZQUFBQSxVQUFBLFVBQU8sQ0FBUCxJQUFBO0FBQ0FBLFlBQUFBLFVBQUEsVUFBTyxDQUFQLElBQUE7QUFDQUEsWUFBQUEsVUFBQSxXQUFRLENBQVIsSUFBQTtBQUpVQSxTQUFBQTtBQUFBLEdBQUEsWUFBQSxDQUFBLENBQUE7QUNHTCxNQUFNLG1CQUE4QjtBQUFBLEVBQ3pDLGFBQWEsU0FBUztBQUFBLEVBQ3RCLGNBQWM7QUFBQSxJQUNaLE1BQU0sU0FBUztBQUFBLElBQ2YsS0FBSyxTQUFTO0FBQUEsSUFDZCxLQUFLLFNBQVM7QUFBQSxJQUNkLFNBQVMsU0FBUztBQUFBLElBQ2xCLE9BQU8sU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFDQSxlQUFlO0FBQUEsRUFDZixpQkFBaUI7QUFBQSxFQUNqQixXQUFXO0FBQ2I7QUFNTyxTQUFTLGVBQTBCO0FBR2pDLFNBQUE7QUFDVDtBQ1pPLE1BQU0sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVbEIsWUFBWSxRQUFzQjtBQUNoQyxVQUFNLGVBQWUsYUFBYTtBQUNsQyxTQUFLLFFBQVEsT0FBTztBQUNmLFNBQUEsU0FBUyxPQUFPLFVBQVU7QUFDL0IsU0FBSyxnQkFBZ0IsT0FBTyxrQkFBa0IsU0FBWSxPQUFPLGdCQUFnQixhQUFhO0FBQzlGLFNBQUssa0JBQWtCLE9BQU8sb0JBQW9CLFNBQVksT0FBTyxrQkFB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
