"use strict";
const electron = require("electron");
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
  LogLevel2[LogLevel2["INFO"] = 1] = "INFO";
  LogLevel2[LogLevel2["WARN"] = 2] = "WARN";
  LogLevel2[LogLevel2["ERROR"] = 3] = "ERROR";
  return LogLevel2;
})(LogLevel || {});
const defaultLogConfig = {
  globalLevel: LogLevel.DEBUG,
  moduleLevels: {
    main: LogLevel.DEBUG,
    ipc: LogLevel.DEBUG,
    llm: LogLevel.DEBUG,
    storage: LogLevel.DEBUG,
    proxy: LogLevel.DEBUG
  },
  showTimestamp: true,
  colorfulConsole: true,
  logToFile: false
};
function getLogConfig() {
  return defaultLogConfig;
}
class Logger {
  /**
   * 构造函数
   * @param config 日志配置
   */
  constructor(config) {
    const globalConfig = getLogConfig();
    this.level = config.level;
    this.prefix = config.prefix || "";
    this.showTimestamp = config.showTimestamp !== void 0 ? config.showTimestamp : globalConfig.showTimestamp;
    this.colorfulConsole = config.colorfulConsole !== void 0 ? config.colorfulConsole : globalConfig.colorfulConsole;
  }
  /**
   * 格式化日志消息
   * @param level 日志级别
   * @param message 日志消息
   * @param args 额外参数
   * @returns 格式化后的日志消息
   */
  formatMessage(level, message, ...args) {
    const timestamp = this.showTimestamp ? `[${(/* @__PURE__ */ new Date()).toLocaleString("zh-CN")}] ` : "";
    const prefix = this.prefix ? `[${this.prefix}] ` : "";
    const levelStr = `[${level}] `;
    const formattedArgs = args.map((arg) => {
      if (typeof arg === "object") {
        try {
          return JSON.stringify(arg);
        } catch {
          return String(arg);
        }
      }
      return String(arg);
    });
    const baseMessage = `${timestamp}${prefix}${levelStr}${message} ${formattedArgs.join(" ")}`.trim();
    if (this.colorfulConsole) {
      if (level === "错误") {
        return `${"\x1B[31m"}${baseMessage}${"\x1B[0m"}`;
      } else if (level === "警告") {
        return `${"\x1B[33m"}${baseMessage}${"\x1B[0m"}`;
      } else if (level === "信息") {
        return `${"\x1B[36m"}${baseMessage}${"\x1B[0m"}`;
      } else if (level === "调试") {
        return `${"\x1B[90m"}${baseMessage}${"\x1B[0m"}`;
      }
    }
    return baseMessage;
  }
  /**
   * 确保字符串使用UTF-8编码
   * 这个函数在Windows终端中特别有用
   * @param str 输入字符串
   * @returns UTF-8编码的字符串
   */
  ensureUtf8(str) {
    if (process.platform === "win32") {
      try {
        return Buffer.from(str, "utf8").toString("utf8");
      } catch {
        return str;
      }
    }
    return str;
  }
  /**
   * 输出调试级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  debug(message, ...args) {
    if (this.level <= LogLevel.DEBUG) {
      const formattedMessage = this.formatMessage("调试", message, ...args);
      console.log(this.ensureUtf8(formattedMessage));
    }
  }
  /**
   * 输出信息级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  info(message, ...args) {
    if (this.level <= LogLevel.INFO) {
      const formattedMessage = this.formatMessage("信息", message, ...args);
      console.log(this.ensureUtf8(formattedMessage));
    }
  }
  /**
   * 输出警告级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  warn(message, ...args) {
    if (this.level <= LogLevel.WARN) {
      const formattedMessage = this.formatMessage("警告", message, ...args);
      console.warn(this.ensureUtf8(formattedMessage));
    }
  }
  /**
   * 输出错误级别日志
   * @param message 日志消息
   * @param args 额外参数
   */
  error(message, ...args) {
    if (this.level <= LogLevel.ERROR) {
      const formattedMessage = this.formatMessage("错误", message, ...args);
      console.error(this.ensureUtf8(formattedMessage));
    }
  }
}
const mainLogger = new Logger({ level: LogLevel.DEBUG, prefix: "主进程" });
new Logger({ level: LogLevel.DEBUG, prefix: "IPC" });
new Logger({ level: LogLevel.DEBUG, prefix: "LLM" });
new Logger({ level: LogLevel.DEBUG, prefix: "存储" });
new Logger({ level: LogLevel.DEBUG, prefix: "代理" });
({
  debug: mainLogger.debug.bind(mainLogger),
  info: mainLogger.info.bind(mainLogger),
  warn: mainLogger.warn.bind(mainLogger),
  error: mainLogger.error.bind(mainLogger)
});
async function setupGlobalEncoding() {
  process.env.LANG = "zh_CN.UTF-8";
  process.env.LC_ALL = "zh_CN.UTF-8";
  process.env.LC_CTYPE = "zh_CN.UTF-8";
  if (process.stdout.isTTY) {
    process.stdout.setDefaultEncoding("utf8");
  }
  if (process.stderr.isTTY) {
    process.stderr.setDefaultEncoding("utf8");
  }
}
setupGlobalEncoding().catch((err) => {
  console.error("设置全局编码时出错:", err);
});
electron.contextBridge.exposeInMainWorld("electronAPI", {
  // 使用不同的键名，避免覆盖可能存在的其他 ipcRenderer 暴露
  // --- 精确暴露存储相关的 invoke 通道 ---
  // 将参数类型从 any 改为 unknown，与 ipcHandler 保持一致
  readStore: (fileName, defaultValue) => electron.ipcRenderer.invoke("read-store", fileName, defaultValue),
  writeStore: (fileName, data) => electron.ipcRenderer.invoke("write-store", fileName, data),
  // 新增：列出聊天会话文件
  listChatSessions: () => electron.ipcRenderer.invoke("list-chat-sessions"),
  // 新增：删除聊天会话文件
  deleteChatSession: (fileName) => electron.ipcRenderer.invoke("delete-chat-session", fileName),
  // --- Chat Session API (Save only, List/Delete/Read via Store API) ---
  saveChatSession: (sessionId, data) => (
    // <-- 新增保存聊天会话 API
    electron.ipcRenderer.invoke("save-chat-session", sessionId, data)
  ),
  // --- Character Data API ---
  listCharacters: () => electron.ipcRenderer.invoke("list-characters"),
  saveCharacter: (character) => electron.ipcRenderer.invoke("save-character", character),
  deleteCharacter: (characterId) => (
    // <-- 参数改为 characterId
    electron.ipcRenderer.invoke("delete-character", characterId)
  ),
  // <-- 传递 characterId
  // --- Script Data API ---
  listScripts: () => electron.ipcRenderer.invoke("list-scripts"),
  saveScript: (script) => electron.ipcRenderer.invoke("save-script", script),
  deleteScript: (scriptId) => (
    // <-- 参数改为 scriptId
    electron.ipcRenderer.invoke("delete-script", scriptId)
  ),
  // <-- 传递 scriptId
  // --- LLM 服务相关 API ---
  llmGetServices: () => electron.ipcRenderer.invoke("llm-get-services"),
  llmSetApiKey: (providerId, apiKey) => electron.ipcRenderer.invoke("llm-set-api-key", providerId, apiKey),
  llmGetAvailableModels: (providerId) => electron.ipcRenderer.invoke("llm-get-available-models", providerId),
  // 新增获取已保存 Keys 的 API
  llmGetSavedKeys: () => electron.ipcRenderer.invoke("llm-get-saved-keys"),
  // 新增：调用聊天生成 API
  // 需要在调用处确保 options 符合 LLMChatOptions 结构 (从 './llm/BaseLLM' 导入)
  // 返回值 data 符合 LLMResponse 结构
  llmGenerateChat: (providerId, options) => electron.ipcRenderer.invoke("llm-generate-chat", providerId, options),
  // 新增：调用流式聊天生成 API (只负责启动，实际数据通过 onLLMStreamChunk 接收)
  // 修改：添加 characterId 参数
  llmGenerateChatStream: (providerId, options, characterId) => electron.ipcRenderer.invoke("llm-generate-chat-stream", providerId, options, characterId),
  // 新增：获取和保存自定义模型列表
  llmGetCustomModels: (providerId) => electron.ipcRenderer.invoke("llm-get-custom-models", providerId),
  llmSaveCustomModels: (providerId, models) => electron.ipcRenderer.invoke("llm-save-custom-models", providerId, models),
  // --- 代理相关 API ---
  proxyGetConfig: () => electron.ipcRenderer.invoke("proxy-get-config"),
  proxySetConfig: (config) => electron.ipcRenderer.invoke("proxy-set-config", config),
  proxyTestConnection: () => electron.ipcRenderer.invoke("proxy-test-connection"),
  // 如果还需要通用的 on/off/send，可以在这里单独暴露，或者按需添加
  // on: (channel, listener) => { /* ... 安全实现 ... */ },
  // send: (channel, data) => { /* ... 安全实现 ... */ },
  // --- 新增：处理 LLM 流式响应 ---
  // 定义流式数据块的预期结构 (可以根据实际情况调整)
  // type LLMStreamChunk = { text?: string; error?: string; done?: boolean; usage?: object; metrics?: object; search?: object; mcpToolResponse?: object; generateImage?: object };
  // 暂时使用 unknown，在接收端进行类型检查
  // 修改：回调函数接收包含 chunk 和 sourceId 的对象
  onLLMStreamChunk: (listener) => {
    const channel = "llm-stream-chunk";
    const internalListener = (_event, data) => {
      listener(data);
    };
    electron.ipcRenderer.on(channel, internalListener);
    return {
      dispose: () => {
        electron.ipcRenderer.removeListener(channel, internalListener);
        mainLogger.info(`已移除监听器: ${channel}`);
      }
    };
  }
  // 你可以在这里暴露其他需要的 API。
});
function domReady(condition = ["complete", "interactive"]) {
  return new Promise((resolve) => {
    if (condition.includes(document.readyState)) {
      resolve(true);
    } else {
      document.addEventListener("readystatechange", () => {
        if (condition.includes(document.readyState)) {
          resolve(true);
        }
      });
    }
  });
}
const safeDOM = {
  append(parent, child) {
    if (!Array.from(parent.children).find((e) => e === child)) {
      return parent.appendChild(child);
    }
  },
  remove(parent, child) {
    if (Array.from(parent.children).find((e) => e === child)) {
      return parent.removeChild(child);
    }
  }
};
function createLoadingIndicator() {
  const className = `loaders-css__square-spin`;
  const styleContent = `
@keyframes square-spin {
  25% { transform: perspective(100px) rotateX(180deg) rotateY(0); }
  50% { transform: perspective(100px) rotateX(180deg) rotateY(180deg); }
  75% { transform: perspective(100px) rotateX(0) rotateY(180deg); }
  100% { transform: perspective(100px) rotateX(0) rotateY(0); }
}
.${className} > div {
  animation-fill-mode: both;
  width: 50px;
  height: 50px;
  background: #fff;
  animation: square-spin 3s 0s cubic-bezier(0.09, 0.57, 0.49, 0.9) infinite;
}
.app-loading-wrap {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #282c34;
  z-index: 9;
}
    `;
  const oStyle = document.createElement("style");
  const oDiv = document.createElement("div");
  oStyle.id = "app-loading-style";
  oStyle.innerHTML = styleContent;
  oDiv.className = "app-loading-wrap";
  oDiv.innerHTML = `<div class="${className}"><div></div></div>`;
  return {
    appendLoading() {
      safeDOM.append(document.head, oStyle);
      safeDOM.append(document.body, oDiv);
    },
    removeLoading() {
      safeDOM.remove(document.head, oStyle);
      safeDOM.remove(document.body, oDiv);
    }
  };
}
const { appendLoading, removeLoading } = createLoadingIndicator();
domReady().then(appendLoading);
window.onmessage = (ev) => {
  if (ev.data && ev.data.payload === "removeLoading") {
    mainLogger.info("收到移除加载指示器的消息");
    removeLoading();
  }
};
setTimeout(removeLoading, 4999);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
