import { promises, createReadStream } from "fs";
import { basename } from "path";
import { g as getDefaultExportFromCjs, F as File } from "./main-DHbgkrOJ.js";
import { i } from "./main-DHbgkrOJ.js";
/*! node-domexception. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */
var nodeDomexception;
var hasRequiredNodeDomexception;
function requireNodeDomexception() {
  if (hasRequiredNodeDomexception) return nodeDomexception;
  hasRequiredNodeDomexception = 1;
  if (!globalThis.DOMException) {
    try {
      const { MessageChannel } = require("worker_threads"), port = new MessageChannel().port1, ab = new ArrayBuffer();
      port.postMessage(ab, [ab, ab]);
    } catch (err) {
      err.constructor.name === "DOMException" && (globalThis.DOMException = err.constructor);
    }
  }
  nodeDomexception = globalThis.DOMException;
  return nodeDomexception;
}
var nodeDomexceptionExports = requireNodeDomexception();
const DOMException = /* @__PURE__ */ getDefaultExportFromCjs(nodeDomexceptionExports);
const getType = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();
function isPlainObject(value) {
  if (getType(value) !== "object") {
    return false;
  }
  const pp = Object.getPrototypeOf(value);
  if (pp === null || pp === void 0) {
    return true;
  }
  const Ctor = pp.constructor && pp.constructor.toString();
  return Ctor === Object.toString();
}
var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FileFromPath_path, _FileFromPath_start;
const MESSAGE = "The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.";
class FileFromPath {
  constructor(input) {
    _FileFromPath_path.set(this, void 0);
    _FileFromPath_start.set(this, void 0);
    __classPrivateFieldSet(this, _FileFromPath_path, input.path, "f");
    __classPrivateFieldSet(this, _FileFromPath_start, input.start || 0, "f");
    this.name = basename(__classPrivateFieldGet(this, _FileFromPath_path, "f"));
    this.size = input.size;
    this.lastModified = input.lastModified;
  }
  slice(start, end) {
    return new FileFromPath({
      path: __classPrivateFieldGet(this, _FileFromPath_path, "f"),
      lastModified: this.lastModified,
      size: end - start,
      start
    });
  }
  async *stream() {
    const { mtimeMs } = await promises.stat(__classPrivateFieldGet(this, _FileFromPath_path, "f"));
    if (mtimeMs > this.lastModified) {
      throw new DOMException(MESSAGE, "NotReadableError");
    }
    if (this.size) {
      yield* createReadStream(__classPrivateFieldGet(this, _FileFromPath_path, "f"), {
        start: __classPrivateFieldGet(this, _FileFromPath_start, "f"),
        end: __classPrivateFieldGet(this, _FileFromPath_start, "f") + this.size - 1
      });
    }
  }
  get [(_FileFromPath_path = /* @__PURE__ */ new WeakMap(), _FileFromPath_start = /* @__PURE__ */ new WeakMap(), Symbol.toStringTag)]() {
    return "File";
  }
}
function createFileFromPath(path, { mtimeMs, size }, filenameOrOptions, options = {}) {
  let filename;
  if (isPlainObject(filenameOrOptions)) {
    [options, filename] = [filenameOrOptions, void 0];
  } else {
    filename = filenameOrOptions;
  }
  const file = new FileFromPath({ path, size, lastModified: mtimeMs });
  if (!filename) {
    filename = file.name;
  }
  return new File([file], filename, {
    ...options,
    lastModified: file.lastModified
  });
}
async function fileFromPath(path, filenameOrOptions, options) {
  const stats = await promises.stat(path);
  return createFileFromPath(path, stats, filenameOrOptions, options);
}
export {
  fileFromPath,
  i as isFile
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZUZyb21QYXRoLUNqV3otOGhVLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvLnN0b3JlL25vZGUtZG9tZXhjZXB0aW9uQDEuMC4wL25vZGVfbW9kdWxlcy9ub2RlLWRvbWV4Y2VwdGlvbi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8uc3RvcmUvZm9ybWRhdGEtbm9kZUA0LjQuMS9ub2RlX21vZHVsZXMvZm9ybWRhdGEtbm9kZS9saWIvZXNtL2lzUGxhaW5PYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvLnN0b3JlL2Zvcm1kYXRhLW5vZGVANC40LjEvbm9kZV9tb2R1bGVzL2Zvcm1kYXRhLW5vZGUvbGliL2VzbS9maWxlRnJvbVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vZGUtZG9tZXhjZXB0aW9uLiBNSVQgTGljZW5zZS4gSmltbXkgV8OkcnRpbmcgPGh0dHBzOi8vamltbXkud2FydGluZy5zZS9vcGVuc291cmNlPiAqL1xuXG5pZiAoIWdsb2JhbFRoaXMuRE9NRXhjZXB0aW9uKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBNZXNzYWdlQ2hhbm5lbCB9ID0gcmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKSxcbiAgICBwb3J0ID0gbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEsXG4gICAgYWIgPSBuZXcgQXJyYXlCdWZmZXIoKVxuICAgIHBvcnQucG9zdE1lc3NhZ2UoYWIsIFthYiwgYWJdKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnIuY29uc3RydWN0b3IubmFtZSA9PT0gJ0RPTUV4Y2VwdGlvbicgJiYgKFxuICAgICAgZ2xvYmFsVGhpcy5ET01FeGNlcHRpb24gPSBlcnIuY29uc3RydWN0b3JcbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxUaGlzLkRPTUV4Y2VwdGlvblxuIiwiY29uc3QgZ2V0VHlwZSA9ICh2YWx1ZSkgPT4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgIGlmIChnZXRUeXBlKHZhbHVlKSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHBwID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICBpZiAocHAgPT09IG51bGwgfHwgcHAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgQ3RvciA9IHBwLmNvbnN0cnVjdG9yICYmIHBwLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIEN0b3IgPT09IE9iamVjdC50b1N0cmluZygpO1xufVxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRmlsZUZyb21QYXRoX3BhdGgsIF9GaWxlRnJvbVBhdGhfc3RhcnQ7XG5pbXBvcnQgeyBzdGF0U3luYywgY3JlYXRlUmVhZFN0cmVhbSwgcHJvbWlzZXMgYXMgZnMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IGJhc2VuYW1lIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCBET01FeGNlcHRpb24gZnJvbSBcIm5vZGUtZG9tZXhjZXB0aW9uXCI7XG5pbXBvcnQgeyBGaWxlIH0gZnJvbSBcIi4vRmlsZS5qc1wiO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSBcIi4vaXNQbGFpbk9iamVjdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaXNGaWxlLmpzXCI7XG5jb25zdCBNRVNTQUdFID0gXCJUaGUgcmVxdWVzdGVkIGZpbGUgY291bGQgbm90IGJlIHJlYWQsIFwiXG4gICAgKyBcInR5cGljYWxseSBkdWUgdG8gcGVybWlzc2lvbiBwcm9ibGVtcyB0aGF0IGhhdmUgb2NjdXJyZWQgYWZ0ZXIgYSByZWZlcmVuY2UgXCJcbiAgICArIFwidG8gYSBmaWxlIHdhcyBhY3F1aXJlZC5cIjtcbmNsYXNzIEZpbGVGcm9tUGF0aCB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgX0ZpbGVGcm9tUGF0aF9wYXRoLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfRmlsZUZyb21QYXRoX3N0YXJ0LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9GaWxlRnJvbVBhdGhfcGF0aCwgaW5wdXQucGF0aCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9GaWxlRnJvbVBhdGhfc3RhcnQsIGlucHV0LnN0YXJ0IHx8IDAsIFwiZlwiKTtcbiAgICAgICAgdGhpcy5uYW1lID0gYmFzZW5hbWUoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsZUZyb21QYXRoX3BhdGgsIFwiZlwiKSk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGlucHV0LnNpemU7XG4gICAgICAgIHRoaXMubGFzdE1vZGlmaWVkID0gaW5wdXQubGFzdE1vZGlmaWVkO1xuICAgIH1cbiAgICBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZUZyb21QYXRoKHtcbiAgICAgICAgICAgIHBhdGg6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbGVGcm9tUGF0aF9wYXRoLCBcImZcIiksXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHRoaXMubGFzdE1vZGlmaWVkLFxuICAgICAgICAgICAgc2l6ZTogZW5kIC0gc3RhcnQsXG4gICAgICAgICAgICBzdGFydFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgKnN0cmVhbSgpIHtcbiAgICAgICAgY29uc3QgeyBtdGltZU1zIH0gPSBhd2FpdCBmcy5zdGF0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbGVGcm9tUGF0aF9wYXRoLCBcImZcIikpO1xuICAgICAgICBpZiAobXRpbWVNcyA+IHRoaXMubGFzdE1vZGlmaWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKE1FU1NBR0UsIFwiTm90UmVhZGFibGVFcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zaXplKSB7XG4gICAgICAgICAgICB5aWVsZCogY3JlYXRlUmVhZFN0cmVhbShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GaWxlRnJvbVBhdGhfcGF0aCwgXCJmXCIpLCB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbGVGcm9tUGF0aF9zdGFydCwgXCJmXCIpLFxuICAgICAgICAgICAgICAgIGVuZDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsZUZyb21QYXRoX3N0YXJ0LCBcImZcIikgKyB0aGlzLnNpemUgLSAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgWyhfRmlsZUZyb21QYXRoX3BhdGggPSBuZXcgV2Vha01hcCgpLCBfRmlsZUZyb21QYXRoX3N0YXJ0ID0gbmV3IFdlYWtNYXAoKSwgU3ltYm9sLnRvU3RyaW5nVGFnKV0oKSB7XG4gICAgICAgIHJldHVybiBcIkZpbGVcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVGaWxlRnJvbVBhdGgocGF0aCwgeyBtdGltZU1zLCBzaXplIH0sIGZpbGVuYW1lT3JPcHRpb25zLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgZmlsZW5hbWU7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoZmlsZW5hbWVPck9wdGlvbnMpKSB7XG4gICAgICAgIFtvcHRpb25zLCBmaWxlbmFtZV0gPSBbZmlsZW5hbWVPck9wdGlvbnMsIHVuZGVmaW5lZF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lT3JPcHRpb25zO1xuICAgIH1cbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGVGcm9tUGF0aCh7IHBhdGgsIHNpemUsIGxhc3RNb2RpZmllZDogbXRpbWVNcyB9KTtcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICAgIGZpbGVuYW1lID0gZmlsZS5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEZpbGUoW2ZpbGVdLCBmaWxlbmFtZSwge1xuICAgICAgICAuLi5vcHRpb25zLCBsYXN0TW9kaWZpZWQ6IGZpbGUubGFzdE1vZGlmaWVkXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZmlsZUZyb21QYXRoU3luYyhwYXRoLCBmaWxlbmFtZU9yT3B0aW9ucywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc3RhdHMgPSBzdGF0U3luYyhwYXRoKTtcbiAgICByZXR1cm4gY3JlYXRlRmlsZUZyb21QYXRoKHBhdGgsIHN0YXRzLCBmaWxlbmFtZU9yT3B0aW9ucywgb3B0aW9ucyk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmlsZUZyb21QYXRoKHBhdGgsIGZpbGVuYW1lT3JPcHRpb25zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBmcy5zdGF0KHBhdGgpO1xuICAgIHJldHVybiBjcmVhdGVGaWxlRnJvbVBhdGgocGF0aCwgc3RhdHMsIGZpbGVuYW1lT3JPcHRpb25zLCBvcHRpb25zKTtcbn1cbiJdLCJuYW1lcyI6WyJmcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVBLE1BQUksQ0FBQyxXQUFXLGNBQWM7QUFDNUIsUUFBSTtBQUNGLFlBQU0sRUFBRSxlQUFjLElBQUssUUFBUSxnQkFBZ0IsR0FDbkQsT0FBTyxJQUFJLGVBQWMsRUFBRyxPQUM1QixLQUFLLElBQUksWUFBVztBQUNwQixXQUFLLFlBQVksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQUEsSUFDOUIsU0FBUSxLQUFLO0FBQ1osVUFBSSxZQUFZLFNBQVMsbUJBQ3ZCLFdBQVcsZUFBZSxJQUFJO0FBQUEsSUFFcEM7QUFBQSxFQUNBO0FBRWMscUJBQUcsV0FBVzs7Ozs7QUNmNUIsTUFBTSxVQUFVLENBQUMsVUFBVyxPQUFPLFVBQVUsU0FBUyxLQUFLLEtBQUssRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLFlBQVc7QUFDMUYsU0FBUyxjQUFjLE9BQU87QUFDMUIsTUFBSSxRQUFRLEtBQUssTUFBTSxVQUFVO0FBQzdCLFdBQU87QUFBQSxFQUNmO0FBQ0ksUUFBTSxLQUFLLE9BQU8sZUFBZSxLQUFLO0FBQ3RDLE1BQUksT0FBTyxRQUFRLE9BQU8sUUFBVztBQUNqQyxXQUFPO0FBQUEsRUFDZjtBQUNJLFFBQU0sT0FBTyxHQUFHLGVBQWUsR0FBRyxZQUFZLFNBQVU7QUFDeEQsU0FBTyxTQUFTLE9BQU8sU0FBVTtBQUNyQztBQ1hBLElBQUkseUJBQWtFLFNBQVUsVUFBVSxPQUFPLE9BQU8sTUFBTSxHQUFHO0FBQzdHLE1BQUksU0FBUyxJQUFLLE9BQU0sSUFBSSxVQUFVLGdDQUFnQztBQUN0RSxNQUFJLFNBQVMsT0FBTyxDQUFDLEVBQUcsT0FBTSxJQUFJLFVBQVUsK0NBQStDO0FBQzNGLE1BQUksT0FBTyxVQUFVLGFBQWEsYUFBYSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUcsT0FBTSxJQUFJLFVBQVUseUVBQXlFO0FBQ2hMLFNBQVEsU0FBUyxNQUFNLEVBQUUsS0FBSyxVQUFVLEtBQUssSUFBSSxJQUFJLEVBQUUsUUFBUSxRQUFRLE1BQU0sSUFBSSxVQUFVLEtBQUssR0FBSTtBQUN4RztBQUNBLElBQUkseUJBQWtFLFNBQVUsVUFBVSxPQUFPLE1BQU0sR0FBRztBQUN0RyxNQUFJLFNBQVMsT0FBTyxDQUFDLEVBQUcsT0FBTSxJQUFJLFVBQVUsK0NBQStDO0FBQzNGLE1BQUksT0FBTyxVQUFVLGFBQWEsYUFBYSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUcsT0FBTSxJQUFJLFVBQVUsMEVBQTBFO0FBQ2pMLFNBQU8sU0FBUyxNQUFNLElBQUksU0FBUyxNQUFNLEVBQUUsS0FBSyxRQUFRLElBQUksSUFBSSxFQUFFLFFBQVEsTUFBTSxJQUFJLFFBQVE7QUFDaEc7QUFDQSxJQUFJLG9CQUFvQjtBQU94QixNQUFNLFVBQVU7QUFHaEIsTUFBTSxhQUFhO0FBQUEsRUFDZixZQUFZLE9BQU87QUFDZix1QkFBbUIsSUFBSSxNQUFNLE1BQU07QUFDbkMsd0JBQW9CLElBQUksTUFBTSxNQUFNO0FBQ3BDLDJCQUF1QixNQUFNLG9CQUFvQixNQUFNLE1BQU0sR0FBRztBQUNoRSwyQkFBdUIsTUFBTSxxQkFBcUIsTUFBTSxTQUFTLEdBQUcsR0FBRztBQUN2RSxTQUFLLE9BQU8sU0FBUyx1QkFBdUIsTUFBTSxvQkFBb0IsR0FBRyxDQUFDO0FBQzFFLFNBQUssT0FBTyxNQUFNO0FBQ2xCLFNBQUssZUFBZSxNQUFNO0FBQUEsRUFDbEM7QUFBQSxFQUNJLE1BQU0sT0FBTyxLQUFLO0FBQ2QsV0FBTyxJQUFJLGFBQWE7QUFBQSxNQUNwQixNQUFNLHVCQUF1QixNQUFNLG9CQUFvQixHQUFHO0FBQUEsTUFDMUQsY0FBYyxLQUFLO0FBQUEsTUFDbkIsTUFBTSxNQUFNO0FBQUEsTUFDWjtBQUFBLElBQ1osQ0FBUztBQUFBLEVBQ1Q7QUFBQSxFQUNJLE9BQU8sU0FBUztBQUNaLFVBQU0sRUFBRSxZQUFZLE1BQU1BLFNBQUcsS0FBSyx1QkFBdUIsTUFBTSxvQkFBb0IsR0FBRyxDQUFDO0FBQ3ZGLFFBQUksVUFBVSxLQUFLLGNBQWM7QUFDN0IsWUFBTSxJQUFJLGFBQWEsU0FBUyxrQkFBa0I7QUFBQSxJQUM5RDtBQUNRLFFBQUksS0FBSyxNQUFNO0FBQ1gsYUFBTyxpQkFBaUIsdUJBQXVCLE1BQU0sb0JBQW9CLEdBQUcsR0FBRztBQUFBLFFBQzNFLE9BQU8sdUJBQXVCLE1BQU0scUJBQXFCLEdBQUc7QUFBQSxRQUM1RCxLQUFLLHVCQUF1QixNQUFNLHFCQUFxQixHQUFHLElBQUksS0FBSyxPQUFPO0FBQUEsTUFDMUYsQ0FBYTtBQUFBLElBQ2I7QUFBQSxFQUNBO0FBQUEsRUFDSSxNQUFNLHFCQUFxQixvQkFBSSxXQUFXLHNCQUFzQixvQkFBSSxRQUFTLEdBQUUsT0FBTyxnQkFBZ0I7QUFDbEcsV0FBTztBQUFBLEVBQ2Y7QUFDQTtBQUNBLFNBQVMsbUJBQW1CLE1BQU0sRUFBRSxTQUFTLEtBQUksR0FBSSxtQkFBbUIsVUFBVSxJQUFJO0FBQ2xGLE1BQUk7QUFDSixNQUFJLGNBQWMsaUJBQWlCLEdBQUc7QUFDbEMsS0FBQyxTQUFTLFFBQVEsSUFBSSxDQUFDLG1CQUFtQixNQUFTO0FBQUEsRUFDM0QsT0FDUztBQUNELGVBQVc7QUFBQSxFQUNuQjtBQUNJLFFBQU0sT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLE1BQU0sY0FBYyxTQUFTO0FBQ25FLE1BQUksQ0FBQyxVQUFVO0FBQ1gsZUFBVyxLQUFLO0FBQUEsRUFDeEI7QUFDSSxTQUFPLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxVQUFVO0FBQUEsSUFDOUIsR0FBRztBQUFBLElBQVMsY0FBYyxLQUFLO0FBQUEsRUFDdkMsQ0FBSztBQUNMO0FBS08sZUFBZSxhQUFhLE1BQU0sbUJBQW1CLFNBQVM7QUFDakUsUUFBTSxRQUFRLE1BQU1BLFNBQUcsS0FBSyxJQUFJO0FBQ2hDLFNBQU8sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsT0FBTztBQUNyRTsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDJdfQ==
