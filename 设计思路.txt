# 🎭 The-LLM-AI-Improv-Theater 设计思路文档

> **编码**：UTF-8（项目源码、配置、读写均统一 UTF-8）
> **字体**：项目根目录放置 `SourceHanSansCN-Normal.otf`，全局引用，确保中文展示一致。

---

## 📦 1. 安装与初始化 (Setup & Initialization)

1. **环境准备**
   ```bash
   npm install -g cnpm --registry=https://registry.npmmirror.com
   ```
2. **项目初始化**
   ```bash
   mkdir -p C:/1/The-LLM-AI-Improv-Theater
   cd C:/1/The-LLM-AI-Improv-Theater
   npm create vite@latest . -- --template react-ts
   ```
3. **依赖安装**
   ```bash
   cnpm install
   cnpm install electron vite-plugin-electron vite-plugin-electron-renderer --save-dev
   cnpm install @types/react @types/react-dom --save-dev
   ```
4. **启动与构建**
   - 开发模式：```npm run electron:dev```  
   - 打包构建：```npm run electron:build```  

---

## 🛠️ 2. 技术选型概览 (Tech Stack)

| 技术            | 用途                         | 特点                                        |
| --------------- | ---------------------------- | ------------------------------------------- |
| **TypeScript**  | 强类型、接口定义             | 提升代码安全，智能感知                     |
| **React**       | 组件化 UI                    | 状态管理清晰，生态丰富                     |
| **Vite**        | 构建工具                     | 极速冷启动、热更新                         |
| **Ant Design**  | UI 组件库                    | 成熟美观，中文化支持                       |
| **Electron**    | 桌面跨平台                    | 支持 Windows/macOS/Linux，原生能力         |
| **cnpm**        | 包管理                       | 淘宝镜像加速                               |

---

## 🎨 3. UI/UX 核心设计 (UI/UX Core Design)

### 整体布局 (Overall Layout)

- **左右分栏**：
  - 左侧**侧边导航栏**（Sidebar）——固定宽度，中文菜单文字
  - 右侧**主内容区**（Main Content）——动态切换，无空白

### 侧边导航 (Sidebar)

- 菜单项（均使用中文文字+图标可选）：
  - 聊天
  - 剧本管理
  - 角色管理
  - AI 配置
  - 历史记录
  - 设置

### 字体与语言

- 全局使用 `SourceHanSansCN-Normal.otf`
- 界面所有文案必须是简体中文，禁止出现英文菜单或按钮

### 滚动条与响应

- 聊天记录、列表、编辑器等区域，确保**美观且流畅**的滚动体验
- 界面响应式，适配不同分辨率

---

## 📁 4. 项目结构 (Project Structure)

```
The-LLM-AI-Improv-Theater/
├── SourceHanSansCN-Normal.otf      # 全局字体
├── electron/                       # 主进程 (TypeScript)
│   ├── main.ts                     # 窗口控制、生命周期
│   ├── preload.ts                  # contextBridge API
│   ├── llm/                        # LLM 服务模块 (base.ts, openai.ts, claude.ts...)
│   ├── storage/                    # JSON 存储 (jsonStore.ts, UTF-8)
│   ├── config.ts                   # 全局配置（代理、编码等）
│   └── ipcHandlers.ts              # ipc 逻辑路由
├── public/                         # 静态资源 (头像、背景、音效)
├── src/                            # 渲染进程 (React + TS)
│   ├── index.html                  # 入口 HTML
│   ├── main.tsx                    # React 初始化
│   ├── App.tsx                     # 根组件 (布局 + Router)
│   ├── router.tsx                  # React Router 路由配置
│   ├── pages/                      # 页面视图
│   │   ├── ChatSetupPage.tsx       # 聊天初始化
│   │   ├── ChatInterfacePage.tsx   # 聊天剧场
│   │   ├── ScriptManagementPage.tsx
│   │   ├── RoleManagementPage.tsx
│   │   ├── AIConfigPage.tsx
│   │   ├── HistoryPage.tsx
│   │   └── SettingsPage.tsx
│   ├── components/                 # 可复用组件
│   │   ├── Sidebar/                # 侧边栏
│   │   ├── ChatBubble/             # 聊天气泡
│   │   ├── ScriptEditor/           # 剧本编辑器
│   │   ├── RoleEditor/             # 角色编辑器
│   │   ├── ModelSelector/          # 模型选择下拉
│   │   └── common/                 # 按钮、输入框等基础组件
│   ├── hooks/                      # 自定义 Hooks (useLLMChat, useStorage)
│   ├── contexts/                   # 全局 Context
│   ├── engine/                     # 核心逻辑 (Character Engine, Conversation Orchestrator)
│   ├── prompts/                    # Prompt 模板 JSON/YAML
│   ├── types/                      # TS 类型定义
│   └── styles/                     # 全局与组件样式 (Tailwind + AntD 覆盖)
├── vite.config.ts                  # Vite 配置
├── electron.vite.config.ts         # Electron+Vite 插件配置
├── tsconfig.json                   # TS 配置
└── package.json                    # 脚本 & 依赖
```

---

## 🔧 5. 核心模块设计 (Core Modules)

### 5.1 AI 角色系统 (Character Engine)

```ts
interface AICharacter {
  id: string;
  name: string;
  avatar: string;
  personality: string;
  promptTemplate: string;
  context: string[];
  llmModel: string;
}
```

- 每个角色独立维护上下文
- 支持“打破第四面墙”、临时指令注入

### 5.2 剧本管理 (Script Manager)

- 支持 JSON/YAML 导入与编辑
- 结构示例：
  ```yaml
  title: 皇城夜话
  scene: 皇帝召见密探深夜密谋
  characters:
    - name: 皇帝
      role: 独裁者的温柔面
    - name: 密探
      role: 冷血却忠诚
  directives:
    - 镜头推进: 密探缓缓走入大殿
    - 音效: 风声、脚步声
  ```

### 5.3 对话引擎 (Conversation Orchestrator)

- 按剧本指令调度轮次
- 发言 → 上下文更新 → AI 调用
- 支持：自动模式 / 人类接入 / 导演干预

### 5.4 剧场视图 (Theater View)

- 基于 Ant Design 组件：`Card`, `Timeline`, `Avatar`, `Modal`, `Tabs`, `Collapse`
- 功能区分：聊天展示、控制面板（播放/暂停/跳过/打断）、信息侧栏

---

## ⚙️ 6. 功能流程 (Feature Flows)

### 聊天流程 (Chat Flow)
1. 点击“聊天”菜单 → 进入 `ChatSetupPage`。  
2. 选择模式（单AI / 多AI / 纯AI）、剧本、角色扮演设置。  
3. 点击“开始聊天” → 跳转 `ChatInterfacePage`。  
4. 渲染聊天记录（可滚动）、AI 流式回复、用户输入框或自动推进。  
5. 导演模式可插入指令、中断或调整角色状态。  

### 剧本 & 角色管理
- 剧本管理：列表 → 新建/编辑/删除 → 关联角色  
- 角色管理：列表 → 新建/编辑/删除 → 设定 Avatar/Prompt  

### AI 配置
- 列表展示已配置服务商（OpenAI, Claude, 本地模型）  
- 新增/编辑 API Key、Endpoint、模型列表  
- 安全存储，使用 os-proxy-config 获取系统代理

### 历史记录
- 按剧本或日期分组展示  
- 点击查看详情（只读）  
- 支持删除会话  

### 应用设置
- 代理设置（自动读取系统代理 via os-proxy-config）
- 主题色/字体设置（可选）

---

## 🔮 7. 拓展与优化 (Next Steps & Extensions)

- **AI 语音合成**：TTS 输出，角色“发声”  
- **角色立绘与动画**：表情切换、小动作  
- **剪辑存档**：自动生成会话录像  
- **直播 & 同步观众模式**：多人观看或局域网同步  
- **插件机制**：自定义角色行为、情绪曲线、交互脚本

---

> 这份设计思路囊括了**初始化**、**技术选型**、**UI/UX**、**项目结构**、**核心模块**、**功能流程**与**可选拓展**。
> 下一步可以基于此撰写**详细技术规格**或**快速起手 Demo**，直接上车驾驭属于你的 AI 即兴剧场！

