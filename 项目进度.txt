# 项目进度总结 (截至 2025-04-27 晚上)

## 核心功能实现

1.  **多 LLM 服务商支持**:
    *   成功集成了 Anthropic Claude 和 Google Gemini 服务到后端 (`electron/llm/`)，与原有的 OpenAI 并存。
    *   创建了统一的 `BaseLLM` 抽象类和 `LLMServiceManager` 来管理不同的服务实例。
    *   添加了 `llm-generate-chat` IPC 通道，打通了前后端调用任意已配置 LLM 进行聊天的基础。

2.  **AI 配置页面 (`AIConfigPage.tsx`)**:
    *   实现了动态加载和显示所有已注册的 LLM 服务商。
    *   实现了对每个服务商 API Key 的输入、保存（持久化到 `apiKeys.json`）和加载。
    *   实现了对每个服务商可用模型列表的动态管理：
        *   可以添加自定义模型 ID。
        *   可以编辑已有的模型 ID（包括默认和自定义的）。
        *   可以删除模型 ID。
        *   可以一键重置模型列表为服务商的默认列表。
        *   自定义模型列表持久化存储在 `customModels.json`。
    *   后端添加了相应的 IPC 通道 (`llm-get-custom-models`, `llm-save-custom-models`) 并更新了 `llm-get-available-models`。

3.  **全局网络代理设置**:
    *   创建了 `electron/proxyManager.ts` 模块，负责管理全局代理。
    *   支持系统代理（使用 `os-proxy-config` 检测并定时监控）和自定义代理（支持 HTTP/HTTPS/SOCKS URL）。
    *   实现了多层代理应用机制：
        *   配置 Electron 会话代理 (`session.setProxy`)。
        *   设置系统环境变量 (`HTTP_PROXY`, `HTTPS_PROXY`)。
        *   配置 `undici` 全局网络分发器 (使用 `proxy-agent` 处理 HTTP/S，`fetch-socks` 处理 SOCKS)。
        *   提供通用 `ProxyAgent` 实例供需要显式配置的 SDK 使用。
    *   修改了 OpenAI 和 Anthropic 的 LLM 实现，使其在初始化时使用 `proxyManager` 提供的 `ProxyAgent`。
    *   在 `electron/main.ts` 中实现了启动时加载并应用保存的代理配置 (`proxyConfig.json`)。
    *   添加了 `proxy-get-config` 和 `proxy-set-config` IPC 通道。
    *   在设置页面 (`src/pages/SettingsPage.tsx`) 添加了完整的 UI 和交互逻辑，允许用户配置和保存代理设置。
    *   修复了设置页面因状态管理不当导致的无限更新循环 Bug。

4.  **聊天流程拆分与设置页面初步实现**:
    *   创建了新的聊天模式选择页面 (`src/pages/ChatModeSelectionPage.tsx`)，提供三种模式选项。
    *   更新了路由 (`src/router.tsx`)，将 `/` 指向模式选择页，并添加了新页面的路由。
    *   初步实现了聊天设置页面 (`src/pages/ChatSetupPage.tsx`) 的基础框架：
        *   能接收从模式选择页传递的 `mode` 参数。
        *   能通过 `readStore` 加载剧本 (`scripts.json`) 和角色 (`roles.json`) 数据。
        *   能加载 AI 服务商和可用模型数据。
        *   实现了剧本选择、出场角色选择、用户扮演角色选择（非导演模式）的 UI 和基础逻辑。
        *   实现了为 AI 角色配置服务商和模型的基础 UI 和逻辑（针对单人单 AI 模式）。
        *   添加了“开始聊天”按钮和针对单人单 AI 模式的基础校验。
    *   修复了因错误读取角色文件名 (`characters.json` 应为 `roles.json`) 导致无法显示关联角色的 Bug。

## 其他

*   项目结构基本遵循 Electron + React + TS + Vite 的标准模板。
*   代码风格和类型安全通过 ESLint 和 TypeScript 进行检查和约束。
*   所有主要的功能变更和 Bug 修复都已通过 Git 提交记录。